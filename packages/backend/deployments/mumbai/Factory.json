{
  "address": "0x7fa60182d32063bb833ba5BDEf66964e7785A5AA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "resultController",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vaultApi",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resultController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultAPI",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xedd31d50e8b0f3c1adc210a73f0747bd7b469b3b907875c2b9644f77cf4136fe",
  "receipt": {
    "to": null,
    "from": "0x5aD972eF7f34F609187B2377f93a500161430f18",
    "contractAddress": "0x7fa60182d32063bb833ba5BDEf66964e7785A5AA",
    "transactionIndex": 1,
    "gasUsed": "2640158",
    "logsBloom": "0x
    "blockHash": "0x4554145c8b7a9ac4639b222133e5bb9907dac259fbb3c1ef0678efa0bdff3fdb",
    "transactionHash": "0xedd31d50e8b0f3c1adc210a73f0747bd7b469b3b907875c2b9644f77cf4136fe",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 43350131,
        "transactionHash": "0xedd31d50e8b0f3c1adc210a73f0747bd7b469b3b907875c2b9644f77cf4136fe",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005ad972ef7f34f609187b2377f93a500161430f18",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000f11bd2d4f153400000000000000000000000000000000000000000000000006865e19517cef8f0000000000000000000000000000000000000000000004360d353aee6160de5d00000000000000000000000000000000000000000000000006774c5c242dda5b0000000000000000000000000000000000000000000004360d444cab8eaff391",
        "logIndex": 2,
        "blockHash": "0x4554145c8b7a9ac4639b222133e5bb9907dac259fbb3c1ef0678efa0bdff3fdb"
      }
    ],
    "blockNumber": 43350131,
    "cumulativeGasUsed": "2679255",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6c6928c530c23cb64b38ffac91418c20",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resultController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultApi\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resultController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAPI\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./Pool.sol\\\";\\n\\ncontract Factory {\\n\\n    event PoolCreated (\\n        address indexed owner,\\n        address indexed asset,\\n        address indexed poolAddress,\\n        address resultController,\\n        address vaultApi\\n    );\\n\\n    function createPool(address asset, address resultController, address vaultAPI) external {\\n        Pool pool = new Pool(asset, resultController, vaultAPI);\\n        emit PoolCreated(msg.sender, asset, address(pool), resultController, vaultAPI);\\n    }\\n}\",\"keccak256\":\"0xbaaef060274a3b7c28d339aef440b45af700d053f321854096861200dc826ff8\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./interfaces/IResultController.sol\\\";\\nimport \\\"./interfaces/IERC4626.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Pool {\\n\\n    /**token used in the vault */\\n    IERC20 public immutable asset;\\n\\n    /**oracle API */\\n    IResultController public immutable resultController;\\n\\n    /**vault API */\\n    IERC4626 public immutable vaultAPI;\\n\\n    event Staked (address indexed staker, uint16 indexed outcome, uint256 amount);\\n\\n    event UnStaked (address indexed staker, uint16 indexed outcome, uint256 amount);\\n\\n    // event PoolClosed (uint16 outcome, uint256 totalStakes, uint256 totalYield);\\n\\n    event Withdrawn (address indexed owner, uint16 outcome, uint256 stake, uint256 prize);\\n\\n    mapping (address => mapping(uint16 => uint256)) private _stakes;\\n\\n    mapping (address => mapping(uint16 => uint256)) private _shares;\\n\\n    mapping (uint16 => uint256) private _sharesByOutcome;\\n\\n    mapping(uint16 => uint256) private _stakeByOutcome;\\n\\n    /**total amoutnt of assets staked in the pool */\\n    uint256 public totalStakes;\\n    /**total amount of yield currently withdrawn */\\n    uint256 public yieldWithdrawn;\\n\\n    /**used in \\\"close&redeem\\\" format */\\n        /**total liquidity of the vault at the moment of closing */\\n        // uint256 public closingLiq;\\n        /**total supply of shares at the moment of closing */\\n        // uint256 public closingShareSupply;\\n        // bool public isOpen;\\n    /** */\\n\\n    modifier OnlyIfOpen {\\n        require(!hasResult(), \\\"Pool already closed\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _assetToken,\\n        address _resultController,\\n        address _vaultAPI\\n    ) {\\n        asset = IERC20(_assetToken);\\n        resultController = IResultController(_resultController);\\n        vaultAPI = IERC4626(_vaultAPI);\\n        // isOpen = true;\\n        asset.approve(_vaultAPI, type(uint256).max);\\n    }\\n\\n    function _safeSub(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        assembly{\\n            if or(lt(x,y), eq(x,y))  {\\n                r := 0\\n            }\\n            if gt(x,y) {\\n                r := sub(x,y)\\n            }\\n        }\\n    }\\n\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function _max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * deposits `amount` in the vault on behalf of caller and assignes it to `outcome`.\\n     * @dev uses ERC4626 API to account for deposits. The contract retains all the shares and uses internal accounting logic.\\n     */\\n    function stake(uint16 outcome, uint256 amount) external OnlyIfOpen {\\n        require(amount <= maxDeposit(), \\\"Amount too big.\\\");\\n        require(asset.allowance(msg.sender, address(this)) >= amount, \\\"Not enough allowance.\\\");\\n        require(outcome < resultController.getOutcomesCount(), \\\"Invalid pick\\\");\\n\\n        asset.transferFrom(msg.sender, address(this), amount);\\n        totalStakes += amount;\\n        _stakes[msg.sender][outcome] += amount;\\n        uint256 shares = vaultAPI.deposit(amount, address(this));\\n        _sharesByOutcome[outcome] += shares;\\n        _stakeByOutcome[outcome] += amount;\\n        _shares[msg.sender][outcome] += shares;\\n\\n        emit Staked(msg.sender, outcome, amount);\\n    }\\n\\n    /**\\n     * makes retrievable donation to the pool.\\n     * @notice exact amount can be withdrawn via unStake.\\n     */\\n    function sponsor(uint256 amount) external OnlyIfOpen {\\n        require(amount <= maxDeposit(), \\\"Amount too big.\\\");\\n        require(asset.allowance(msg.sender, address(this)) >= amount, \\\"Not enough allowance.\\\");\\n\\n        asset.transferFrom(msg.sender, address(this), amount);\\n        totalStakes += amount;\\n        _stakes[msg.sender][0] += amount;\\n        uint256 shares = vaultAPI.deposit(amount, address(this));\\n        _sharesByOutcome[0] += shares;\\n        _stakeByOutcome[0] += amount;\\n        _shares[msg.sender][0] += amount;\\n\\n        emit Staked(msg.sender, 0, amount);\\n    }\\n\\n    /**\\n     * withdraws `amount` from the vault sends it to owner and deducts the corresponding value of shares/stake.\\n     * @notice can only withdraw stake and not yield.\\n     */\\n    function unStake(uint16 outcome, uint256 amount) external OnlyIfOpen /* put REENTRANCY GUARD */ { \\n        require(amount <= _stakes[msg.sender][outcome], \\\"Not enough stake, adjust amount.\\\");\\n        require(amount <= maxWithdraw(msg.sender, outcome), \\\"Amount too big.\\\");\\n\\n        _stakes[msg.sender][outcome] -= amount;\\n        totalStakes -= amount;\\n        uint256 shares = vaultAPI.withdraw(amount, msg.sender, address(this));\\n        _shares[msg.sender][outcome] -= shares;\\n        _sharesByOutcome[outcome] -= shares;\\n        _stakeByOutcome[outcome] -= amount;\\n\\n        emit UnStaked(msg.sender, outcome, amount);\\n    }\\n\\n    \\n    /**\\n     * metdodo close pool?\\n\\t *   -retira todos os fundos do vault\\n\\t *   -isOpen = false\\n\\t *  -restrito a resultController\\n\\t * PROBLEMA:\\n\\t *\\t-\\u00e9 preciso capturar os valores agregados do vault no momento do fechamento e calcular a pre\\u00e7o na pool pra distrubuir o premio\\n\\t *\\t    -como o padr\\u00e3o \\u00e9 agnostico em rela\\u00e7\\u00e3o a como as shares s\\u00e3o precificadas, isso pode ser um problema pois poderia ter diverg\\u00eancia\\n     *      -\\n     */\\n    \\n    /**\\n     * closes pool and withdraws all assets from vault\\n     */\\n    // function closePool(uint16 result) external {\\n    //     require(msg.sender == address(resultController), \\\"You can't close the Pool.\\\");\\n    //     /**logic used in \\\"close&redeem\\\" format */\\n    //         /*capturing pool aggregated values at moment of closing*/\\n    //         // closingLiq = vaultAPI.totalAssets();\\n    //         // closingShareSupply = vaultAPI.totalSupply();\\n    //         // \\n    //         // vaultAPI.redeem(vaultAPI.totalSupply(), address(this), address(this));\\n    //     // isOpen = false;\\n    //     emit PoolClosed(result, totalStakes, getYield());\\n    // }\\n\\n    /**\\n     * pulls balance from the pool after closing.\\n     * @notice needs to be called for each outcome picked.\\n     */\\n    function withdraw(uint16 outcome) external {\\n        require(hasResult(), \\\"Pool is still open! Use unStake()\\\");\\n        uint256 shares = _shares[msg.sender][outcome];\\n        require(shares != 0, \\\"Nothing to withdraw. Adjust outcome.\\\");\\n        uint256 stake_ = _stakes[msg.sender][outcome];\\n        if(outcome == resultController.getResult()){ /**includes prize */\\n            uint256 prize = previewPrize(outcome, shares, stake_);\\n            _shares[msg.sender][outcome] = 0;\\n            totalStakes -= stake_;\\n            vaultAPI.withdraw(prize + stake_, msg.sender, address(this));\\n            yieldWithdrawn += prize;\\n            _sharesByOutcome[outcome] -= shares;\\n            _stakeByOutcome[outcome] -=stake_;\\n            emit Withdrawn(msg.sender, outcome, prize, stake_);\\n            return;\\n        }\\n        _shares[msg.sender][outcome] = 0;\\n        totalStakes -= stake_;\\n        uint256 totAss = vaultAPI.totalAssets();\\n        vaultAPI.withdraw(stake_ < totAss ? stake_ : totAss, msg.sender, address(this));\\n        emit Withdrawn(msg.sender, outcome, 0, stake_);\\n    }\\n\\n    /**GETTERS */\\n\\n    /**\\n     * @notice returns the value of the current prize if the oucome provided was the end result.\\n     * @param outcome the outcome predicted to be the end result.\\n     * @param shares number of shares related to `outcome`.\\n     * @param stake_ amount staked in `outcome`.\\n     */\\n    function previewPrize(uint16 outcome, uint256 shares, uint256 stake_) public view returns(uint256) {\\n        uint256 totalYield = getYield();\\n        uint256 indYield = _safeSub(vaultAPI.convertToAssets(shares), stake_);\\n        uint256 outcomeYield = _safeSub(vaultAPI.convertToAssets(_sharesByOutcome[outcome]), _stakeByOutcome[outcome]);\\n        return outcomeYield > 0? (indYield * totalYield) / outcomeYield : 0;\\n    }\\n\\n    /**returns total value locked in this pool */\\n    function getTVL() public view returns (uint256) {\\n        return vaultAPI.totalAssets();\\n    }\\n\\n    /**\\n     * returns total yield generated by the pool\\n     */\\n    function getYield() public view returns (uint256) {\\n        // uint256 shares = vaultAPI.balanceOf(address(this));\\n        // return vaultAPI.convertToAssets(shares) - totalStakes;\\n        return _safeSub(getTVL(), totalStakes);\\n    }\\n\\n    function getStakeByOutcome(uint16 outcome) public view returns (uint256) {\\n        return _stakeByOutcome[outcome];\\n    }\\n\\n    /**returns total amount staked in a given outcome */\\n    function getSharesByOutcome(uint16 outcome) public view returns (uint256) {\\n        return _sharesByOutcome[outcome];\\n    }\\n\\n    /**returns total amount staked by an account in a given outcome */\\n    function getStake(address staker, uint16 outcome) external view returns (uint256) {\\n        return _stakes[staker][outcome];\\n    }\\n\\n    function getShares(address owner, uint16 outcome) external view returns (uint256) {\\n        return _shares[owner][outcome];\\n    }\\n\\n    /**\\n     * @notice returns the maximum amount that can be deposited via the API. Usually defined by the vault protocol.\\n     */\\n    function maxDeposit() public view returns  (uint256) {\\n        return vaultAPI.maxDeposit(address(this));\\n    }\\n\\n    /**\\n     * @notice returns the maximum amount withdrawable in a tx for a given pair (user, outcome).\\n     * @param owner the user that staked the assets and therefore has a claim to part of pool balance.\\n     * @param outcome the outcome related to this particular balance.\\n     */\\n    function maxWithdraw(address owner, uint16 outcome) public view returns (uint256){\\n        uint256 maxPool = vaultAPI.maxWithdraw(address(this));\\n        uint256 stake_ = _stakes[owner][outcome];\\n        \\n        if(!hasResult())\\n          return _min(stake_, maxPool);\\n        \\n        if(outcome == resultController.getResult()) {\\n          uint256 bal = previewPrize(outcome, _shares[owner][outcome], stake_) + stake_;\\n          return _min(bal, maxPool);\\n        }\\n        return _min(stake_, maxPool);\\n    }\\n\\n    function hasResult() public view returns (bool) {\\n        return resultController.hasResult();\\n    }\\n\\n}\",\"keccak256\":\"0x6365c9b002a3ae69f14c46f3b8f358ba090e4e17dd5e027f554f2b08057c0cab\",\"license\":\"MIT\"},\"contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC4626 is IERC20 {\\n    \\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    // function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n\\n    function previewDeposit(uint256 assets) external view returns (uint256);\\n\\n    // function previewMint(uint256 shares) external view returns (uint256);\\n\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n\\n    // function previewRedeem(uint256 shares) external view returns (uint256);\\n\\n    function maxDeposit(address) external view returns (uint256) ;\\n\\n    // function maxMint(address) external view returns (uint256);\\n\\n    function maxWithdraw(address owner) external view returns (uint256);\\n\\n    // function maxRedeem(address owner) external view returns (uint256);\\n\\n}\",\"keccak256\":\"0x6340fd952e9be69535d875dcfeeab9061b33f3d31f004412d362f5e923ac4b30\",\"license\":\"MIT\"},\"contracts/interfaces/IResultController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IResultController {\\n\\n  event resultGenerated (address indexed controller, uint256 indexed result);\\n\\n  function hasResult () external view returns (bool);\\n  \\n  function getResult () external view returns (uint256);\\n  \\n  function getOutcomesCount () external view returns (uint256);\\n  \\n  function getOutcomeName (uint256 index) external view returns (bytes32);\\n  \\n  function getGame () external view returns (bytes32);\\n\\n}\",\"keccak256\":\"0x619a43c4944376159a3c1678ddfb696f213e74d4764a45ba57ad92968a41c93a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612f12806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063236aea2e14610030575b600080fd5b61004a6004803603810190610045919061017c565b61004c565b005b600083838360405161005d9061010c565b610069939291906101de565b604051809103906000f080158015610085573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f583aa3202641e70abf6c4e526dd0bf713aa272b67f557ed30f2e40a37d985a8e86866040516100fe929190610215565b60405180910390a450505050565b612c9e8061023f83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101498261011e565b9050919050565b6101598161013e565b811461016457600080fd5b50565b60008135905061017681610150565b92915050565b60008060006060848603121561019557610194610119565b5b60006101a386828701610167565b93505060206101b486828701610167565b92505060406101c586828701610167565b9150509250925092565b6101d88161013e565b82525050565b60006060820190506101f360008301866101cf565b61020060208301856101cf565b61020d60408301846101cf565b949350505050565b600060408201905061022a60008301856101cf565b61023760208301846101cf565b939250505056fe60e06040523480156200001157600080fd5b5060405162002c9e38038062002c9e8339818101604052810190620000379190620001ec565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505060805173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016200013292919062000274565b6020604051808303816000875af115801562000152573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001789190620002de565b5050505062000310565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001b48262000187565b9050919050565b620001c681620001a7565b8114620001d257600080fd5b50565b600081519050620001e681620001bb565b92915050565b60008060006060848603121562000208576200020762000182565b5b60006200021886828701620001d5565b93505060206200022b86828701620001d5565b92505060406200023e86828701620001d5565b9150509250925092565b6200025381620001a7565b82525050565b6000819050919050565b6200026e8162000259565b82525050565b60006040820190506200028b600083018562000248565b6200029a602083018462000263565b9392505050565b60008115159050919050565b620002b881620002a1565b8114620002c457600080fd5b50565b600081519050620002d881620002ad565b92915050565b600060208284031215620002f757620002f662000182565b5b60006200030784828501620002c7565b91505092915050565b60805160a05160c0516128d9620003c56000396000818161061901528181610a6c01528181610c6801528181610cf901528181610e1401528181610ebb01528181610fc801528181611067015281816110f1015281816116aa0152818161193c0152611c660152600081816103c80152818161094d015281816110b00152818161120801526114ac0152600081816107e6015281816113cf0152818161158001528181611a630152611b4001526128d96000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063767123ec116100ad57806392f3eb381161007157806392f3eb381461030c57806397b3fcaa1461033c578063b6cce5e21461035a578063bf9befb114610376578063c180e49e1461039457610121565b8063767123ec146102545780637c262871146102725780637f3db09214610290578063863ed73d146102c057806391342028146102dc57610121565b80633d972839116100f45780633d9728391461019c578063574f0ac8146101b85780636083e59a146101e857806363bc19631461020657806369b9f9d11461022457610121565b80631053eaa3146101265780631e3339dd14610144578063313b9b7b1461016257806338d52e0f1461017e575b600080fd5b61012e6103c4565b60405161013b9190611ea5565b60405180910390f35b61014c61045a565b6040516101599190611ed9565b60405180910390f35b61017c60048036038101906101779190611f5f565b610460565b005b6101866107e4565b604051610193919061201e565b60405180910390f35b6101b660048036038101906101b19190612039565b610808565b005b6101d260048036038101906101cd9190612066565b610e00565b6040516101df9190611ed9565b60405180910390f35b6101f0610fc4565b6040516101fd9190611ed9565b60405180910390f35b61020e611065565b60405161021b91906120da565b60405180910390f35b61023e60048036038101906102399190612039565b611089565b60405161024b9190611ed9565b60405180910390f35b61025c6110ae565b6040516102699190612116565b60405180910390f35b61027a6110d2565b6040516102879190611ed9565b60405180910390f35b6102aa60048036038101906102a5919061216f565b6110ec565b6040516102b79190611ed9565b60405180910390f35b6102da60048036038101906102d59190611f5f565b61133a565b005b6102f660048036038101906102f1919061216f565b611873565b6040516103039190611ed9565b60405180910390f35b6103266004803603810190610321919061216f565b6118d5565b6040516103339190611ed9565b60405180910390f35b610344611938565b6040516103519190611ed9565b60405180910390f35b610374600480360381019061036f91906121af565b6119ce565b005b61037e611e1f565b60405161038b9190611ed9565b60405180910390f35b6103ae60048036038101906103a99190612039565b611e25565b6040516103bb9190611ed9565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631053eaa36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610431573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104559190612208565b905090565b60055481565b6104686103c4565b156104a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049f90612292565b60405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff16815260200190815260200160002054811115610542576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610539906122fe565b60405180910390fd5b61054c33836110ec565b81111561058e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105859061236a565b60405180910390fd5b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff16815260200190815260200160002060008282546105f591906123b9565b92505081905550806004600082825461060e91906123b9565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b460af948333306040518463ffffffff1660e01b8152600401610674939291906123fc565b6020604051808303816000875af1158015610693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b79190612448565b905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff168152602001908152602001600020600082825461072191906123b9565b9250508190555080600260008561ffff1661ffff168152602001908152602001600020600082825461075391906123b9565b9250508190555081600360008561ffff1661ffff168152602001908152602001600020600082825461078591906123b9565b925050819055508261ffff163373ffffffffffffffffffffffffffffffffffffffff167f173e1d9feeeac86f9df1a7a5419b51747340c8fbde4107987dafd0466d25a6ee846040516107d79190611ed9565b60405180910390a3505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6108106103c4565b61084f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610846906124e7565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff168152602001908152602001600020549050600081036108ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e690612579565b60405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff1681526020019081526020016000205490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663de2927896040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109da9190612448565b8361ffff1603610bed5760006109f1848484610e00565b90506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008661ffff1661ffff168152602001908152602001600020819055508160046000828254610a6391906123b9565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b460af948383610ab29190612599565b33306040518463ffffffff1660e01b8152600401610ad2939291906123fc565b6020604051808303816000875af1158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190612448565b508060056000828254610b289190612599565b9250508190555082600260008661ffff1661ffff1681526020019081526020016000206000828254610b5a91906123b9565b9250508190555081600360008661ffff1661ffff1681526020019081526020016000206000828254610b8c91906123b9565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f705b4547f20b6c26740e28f69ae3e938854f1021d63cce5a39e4ab27ab4c1c9b858385604051610bdd939291906125dc565b60405180910390a2505050610dfd565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff168152602001908152602001600020819055508060046000828254610c5d91906123b9565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf59190612448565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b460af94828410610d405782610d42565b835b33306040518463ffffffff1660e01b8152600401610d62939291906123fc565b6020604051808303816000875af1158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da59190612448565b503373ffffffffffffffffffffffffffffffffffffffff167f705b4547f20b6c26740e28f69ae3e938854f1021d63cce5a39e4ab27ab4c1c9b85600085604051610df19392919061264e565b60405180910390a25050505b50565b600080610e0b6110d2565b90506000610eb27f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166307a2d13a876040518263ffffffff1660e01b8152600401610e6b9190611ed9565b602060405180830381865afa158015610e88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eac9190612448565b85611e4a565b90506000610f8f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166307a2d13a600260008b61ffff1661ffff168152602001908152602001600020546040518263ffffffff1660e01b8152600401610f2d9190611ed9565b602060405180830381865afa158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6e9190612448565b600360008a61ffff1661ffff16815260200190815260200160002054611e4a565b905060008111610fa0576000610fb8565b808383610fad9190612685565b610fb791906126f6565b5b93505050509392505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663402d267d306040518263ffffffff1660e01b815260040161101f9190612727565b602060405180830381865afa15801561103c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110609190612448565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600360008361ffff1661ffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006110e76110df611938565b600454611e4a565b905090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ce96cb77306040518263ffffffff1660e01b81526004016111489190612727565b602060405180830381865afa158015611165573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111899190612448565b905060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff1681526020019081526020016000205490506111ef6103c4565b611206576111fd8183611e71565b92505050611334565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663de2927896040518163ffffffff1660e01b8152600401602060405180830381865afa158015611271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112959190612448565b8461ffff16036113255760008161130586600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008961ffff1661ffff1681526020019081526020016000205485610e00565b61130f9190612599565b905061131b8184611e71565b9350505050611334565b61132f8183611e71565b925050505b92915050565b6113426103c4565b15611382576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137990612292565b60405180910390fd5b61138a610fc4565b8111156113cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c39061236a565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611428929190612742565b602060405180830381865afa158015611445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114699190612448565b10156114aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a1906127b7565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638033c00d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115399190612448565b8261ffff161061157e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157590612823565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016115db93929190612843565b6020604051808303816000875af11580156115fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161e9190612208565b5080600460008282546116319190612599565b92505081905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff168152602001908152602001600020600082825461169f9190612599565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636e553f6583306040518363ffffffff1660e01b815260040161170392919061287a565b6020604051808303816000875af1158015611722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117469190612448565b905080600260008561ffff1661ffff16815260200190815260200160002060008282546117739190612599565b9250508190555081600360008561ffff1661ffff16815260200190815260200160002060008282546117a59190612599565b9250508190555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff16815260200190815260200160002060008282546118149190612599565b925050819055508261ffff163373ffffffffffffffffffffffffffffffffffffffff167f074be96cbda9766dbe0c925ac833fc192f07104c123e767598a5c06096e6e03d846040516118669190611ed9565b60405180910390a3505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff16815260200190815260200160002054905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff16815260200190815260200160002054905092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c99190612448565b905090565b6119d66103c4565b15611a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0d90612292565b60405180910390fd5b611a1e610fc4565b811115611a60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a579061236a565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611abc929190612742565b602060405180830381865afa158015611ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afd9190612448565b1015611b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b35906127b7565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611b9b93929190612843565b6020604051808303816000875af1158015611bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bde9190612208565b508060046000828254611bf19190612599565b92505081905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008061ffff1681526020019081526020016000206000828254611c5b9190612599565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636e553f6583306040518363ffffffff1660e01b8152600401611cbf92919061287a565b6020604051808303816000875af1158015611cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d029190612448565b905080600260008061ffff1681526020019081526020016000206000828254611d2b9190612599565b9250508190555081600360008061ffff1681526020019081526020016000206000828254611d599190612599565b9250508190555081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008061ffff1681526020019081526020016000206000828254611dc49190612599565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff167f074be96cbda9766dbe0c925ac833fc192f07104c123e767598a5c06096e6e03d84604051611e139190611ed9565b60405180910390a35050565b60045481565b6000600260008361ffff1661ffff168152602001908152602001600020549050919050565b60008183148284101715611e5d57600090505b81831115611e6b5781830390505b92915050565b6000818310611e805781611e82565b825b905092915050565b60008115159050919050565b611e9f81611e8a565b82525050565b6000602082019050611eba6000830184611e96565b92915050565b6000819050919050565b611ed381611ec0565b82525050565b6000602082019050611eee6000830184611eca565b92915050565b600080fd5b600061ffff82169050919050565b611f1081611ef9565b8114611f1b57600080fd5b50565b600081359050611f2d81611f07565b92915050565b611f3c81611ec0565b8114611f4757600080fd5b50565b600081359050611f5981611f33565b92915050565b60008060408385031215611f7657611f75611ef4565b5b6000611f8485828601611f1e565b9250506020611f9585828601611f4a565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611fe4611fdf611fda84611f9f565b611fbf565b611f9f565b9050919050565b6000611ff682611fc9565b9050919050565b600061200882611feb565b9050919050565b61201881611ffd565b82525050565b6000602082019050612033600083018461200f565b92915050565b60006020828403121561204f5761204e611ef4565b5b600061205d84828501611f1e565b91505092915050565b60008060006060848603121561207f5761207e611ef4565b5b600061208d86828701611f1e565b935050602061209e86828701611f4a565b92505060406120af86828701611f4a565b9150509250925092565b60006120c482611feb565b9050919050565b6120d4816120b9565b82525050565b60006020820190506120ef60008301846120cb565b92915050565b600061210082611feb565b9050919050565b612110816120f5565b82525050565b600060208201905061212b6000830184612107565b92915050565b600061213c82611f9f565b9050919050565b61214c81612131565b811461215757600080fd5b50565b60008135905061216981612143565b92915050565b6000806040838503121561218657612185611ef4565b5b60006121948582860161215a565b92505060206121a585828601611f1e565b9150509250929050565b6000602082840312156121c5576121c4611ef4565b5b60006121d384828501611f4a565b91505092915050565b6121e581611e8a565b81146121f057600080fd5b50565b600081519050612202816121dc565b92915050565b60006020828403121561221e5761221d611ef4565b5b600061222c848285016121f3565b91505092915050565b600082825260208201905092915050565b7f506f6f6c20616c726561647920636c6f73656400000000000000000000000000600082015250565b600061227c601383612235565b915061228782612246565b602082019050919050565b600060208201905081810360008301526122ab8161226f565b9050919050565b7f4e6f7420656e6f756768207374616b652c2061646a75737420616d6f756e742e600082015250565b60006122e8602083612235565b91506122f3826122b2565b602082019050919050565b60006020820190508181036000830152612317816122db565b9050919050565b7f416d6f756e7420746f6f206269672e0000000000000000000000000000000000600082015250565b6000612354600f83612235565b915061235f8261231e565b602082019050919050565b6000602082019050818103600083015261238381612347565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006123c482611ec0565b91506123cf83611ec0565b92508282039050818111156123e7576123e661238a565b5b92915050565b6123f681612131565b82525050565b60006060820190506124116000830186611eca565b61241e60208301856123ed565b61242b60408301846123ed565b949350505050565b60008151905061244281611f33565b92915050565b60006020828403121561245e5761245d611ef4565b5b600061246c84828501612433565b91505092915050565b7f506f6f6c206973207374696c6c206f70656e212055736520756e5374616b652860008201527f2900000000000000000000000000000000000000000000000000000000000000602082015250565b60006124d1602183612235565b91506124dc82612475565b604082019050919050565b60006020820190508181036000830152612500816124c4565b9050919050565b7f4e6f7468696e6720746f2077697468647261772e2041646a757374206f75746360008201527f6f6d652e00000000000000000000000000000000000000000000000000000000602082015250565b6000612563602483612235565b915061256e82612507565b604082019050919050565b6000602082019050818103600083015261259281612556565b9050919050565b60006125a482611ec0565b91506125af83611ec0565b92508282019050808211156125c7576125c661238a565b5b92915050565b6125d681611ef9565b82525050565b60006060820190506125f160008301866125cd565b6125fe6020830185611eca565b61260b6040830184611eca565b949350505050565b6000819050919050565b600061263861263361262e84612613565b611fbf565b611ec0565b9050919050565b6126488161261d565b82525050565b600060608201905061266360008301866125cd565b612670602083018561263f565b61267d6040830184611eca565b949350505050565b600061269082611ec0565b915061269b83611ec0565b92508282026126a981611ec0565b915082820484148315176126c0576126bf61238a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061270182611ec0565b915061270c83611ec0565b92508261271c5761271b6126c7565b5b828204905092915050565b600060208201905061273c60008301846123ed565b92915050565b600060408201905061275760008301856123ed565b61276460208301846123ed565b9392505050565b7f4e6f7420656e6f75676820616c6c6f77616e63652e0000000000000000000000600082015250565b60006127a1601583612235565b91506127ac8261276b565b602082019050919050565b600060208201905081810360008301526127d081612794565b9050919050565b7f496e76616c6964207069636b0000000000000000000000000000000000000000600082015250565b600061280d600c83612235565b9150612818826127d7565b602082019050919050565b6000602082019050818103600083015261283c81612800565b9050919050565b600060608201905061285860008301866123ed565b61286560208301856123ed565b6128726040830184611eca565b949350505050565b600060408201905061288f6000830185611eca565b61289c60208301846123ed565b939250505056fea2646970667358221220404553d3c2fbe9547d2710701c5ca1cc171d8cc358855f2ad56149daddfd343764736f6c63430008140033a2646970667358221220cafb38f0bf10627f84ba230ca41eee466e34f1c044854bca4277ae921e91a28a64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}