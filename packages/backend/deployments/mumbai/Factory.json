{
  "address": "0x8fA7D1434A90ad1d5FDf461395fA92f69Dc5C9E3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "resultController",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vaultApi",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resultController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultAPI",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe89302a0d169856df959a8f6f779ba9f1a5079b6d2cf0c5646ed40a4b9a4ea02",
  "receipt": {
    "to": null,
    "from": "0x099A294Bffb99Cb2350A6b6cA802712D9C96676A",
    "contractAddress": "0x8fA7D1434A90ad1d5FDf461395fA92f69Dc5C9E3",
    "transactionIndex": 14,
    "gasUsed": "2628115",
    "logsBloom": "0x
    "blockHash": "0x4cc5b3b9217739cfca9486f6de186520e974a9cf438a2e01e043e35ce4546f60",
    "transactionHash": "0xe89302a0d169856df959a8f6f779ba9f1a5079b6d2cf0c5646ed40a4b9a4ea02",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 43223065,
        "transactionHash": "0xe89302a0d169856df959a8f6f779ba9f1a5079b6d2cf0c5646ed40a4b9a4ea02",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000099a294bffb99cb2350a6b6ca802712d9c96676a",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000e01628f817d000000000000000000000000000000000000000000000000000ddcde4ec516001800000000000000000000000000000000000000000000041e798c7bce8ca623570000000000000000000000000000000000000000000000000dcedcec3594831800000000000000000000000000000000000000000000041e799a7d311c27a057",
        "logIndex": 50,
        "blockHash": "0x4cc5b3b9217739cfca9486f6de186520e974a9cf438a2e01e043e35ce4546f60"
      }
    ],
    "blockNumber": 43223065,
    "cumulativeGasUsed": "3887057",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0cac551dd0b8f1f6420fde3de86aa972",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resultController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultApi\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resultController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAPI\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./Pool.sol\\\";\\n\\ncontract Factory {\\n\\n    event PoolCreated (\\n        address indexed owner,\\n        address indexed asset,\\n        address indexed poolAddress,\\n        address resultController,\\n        address vaultApi\\n    );\\n\\n    function createPool(address asset, address resultController, address vaultAPI) external {\\n        Pool pool = new Pool(asset, resultController, vaultAPI);\\n        emit PoolCreated(msg.sender, asset, address(pool), resultController, vaultAPI);\\n    }\\n}\",\"keccak256\":\"0xbaaef060274a3b7c28d339aef440b45af700d053f321854096861200dc826ff8\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./interfaces/IResultController.sol\\\";\\nimport \\\"./interfaces/IERC4626.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Pool {\\n\\n    /**token used in the vault */\\n    IERC20 public immutable asset;\\n\\n    /**oracle API */\\n    IResultController public immutable resultController;\\n\\n    /**vault API */\\n    IERC4626 public immutable vaultAPI;\\n\\n    event Staked (address indexed staker, uint16 indexed outcome, uint256 amount);\\n\\n    event UnStaked (address indexed staker, uint16 indexed outcome, uint256 amount);\\n\\n    // event PoolClosed (uint16 outcome, uint256 totalStakes, uint256 totalYield);\\n\\n    event Withdrawn (address indexed owner, uint16 outcome, uint256 stake, uint256 prize);\\n\\n    mapping (address => mapping(uint16 => uint256)) private _stakes;\\n\\n    mapping (address => mapping(uint16 => uint256)) private _shares;\\n\\n    mapping (uint16 => uint256) private _sharesByOutcome;\\n\\n    mapping(uint16 => uint256) private _stakeByOutcome;\\n\\n    /**total amoutnt of assets staked in the pool */\\n    uint256 public totalStakes;\\n    /**total amount of yield currently withdrawn */\\n    uint256 public yieldWithdrawn;\\n\\n    /**used in \\\"close&redeem\\\" format */\\n        /**total liquidity of the vault at the moment of closing */\\n        // uint256 public closingLiq;\\n        /**total supply of shares at the moment of closing */\\n        // uint256 public closingShareSupply;\\n        // bool public isOpen;\\n    /** */\\n\\n    modifier OnlyIfOpen {\\n        require(!hasResult(), \\\"Pool already closed\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _assetToken,\\n        address _resultController,\\n        address _vaultAPI\\n    ) {\\n        asset = IERC20(_assetToken);\\n        resultController = IResultController(_resultController);\\n        vaultAPI = IERC4626(_vaultAPI);\\n        // isOpen = true;\\n        asset.approve(_vaultAPI, type(uint256).max);\\n    }\\n\\n    function _safeSub(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        assembly{\\n            if or(lt(x,y), eq(x,y))  {\\n                r := 0\\n            }\\n            if gt(x,y) {\\n                r := sub(x,y)\\n            }\\n        }\\n    }\\n\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function _max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * deposits `amount` in the vault on behalf of caller and assignes it to `outcome`.\\n     * @dev uses ERC4626 API to account for deposits. The contract retains all the shares and uses internal accounting logic.\\n     */\\n    function stake(uint16 outcome, uint256 amount) external OnlyIfOpen {\\n        require(amount <= maxDeposit(), \\\"Amount too big.\\\");\\n        require(asset.allowance(msg.sender, address(this)) >= amount, \\\"Not enough allowance.\\\");\\n        require(outcome < resultController.getOutcomesCount(), \\\"Invalid pick\\\");\\n\\n        asset.transferFrom(msg.sender, address(this), amount);\\n        totalStakes += amount;\\n        _stakes[msg.sender][outcome] += amount;\\n        uint256 shares = vaultAPI.deposit(amount, address(this));\\n        _sharesByOutcome[outcome] += shares;\\n        _stakeByOutcome[outcome] += amount;\\n        _shares[msg.sender][outcome] += shares;\\n\\n        emit Staked(msg.sender, outcome, amount);\\n    }\\n\\n    /**\\n     * makes retrievable donation to the pool.\\n     * @notice exact amount can be withdrawn via unStake.\\n     */\\n    function sponsor(uint256 amount) external OnlyIfOpen {\\n        require(amount <= maxDeposit(), \\\"Amount too big.\\\");\\n        require(asset.allowance(msg.sender, address(this)) >= amount, \\\"Not enough allowance.\\\");\\n\\n        asset.transferFrom(msg.sender, address(this), amount);\\n        totalStakes += amount;\\n        _stakes[msg.sender][0] += amount;\\n        uint256 shares = vaultAPI.deposit(amount, address(this));\\n        _sharesByOutcome[0] += shares;\\n        _stakeByOutcome[0] += amount;\\n        _shares[msg.sender][0] += amount;\\n\\n        emit Staked(msg.sender, 0, amount);\\n    }\\n\\n    /**\\n     * withdraws `amount` from the vault sends it to owner and deducts the corresponding value of shares/stake.\\n     * @notice can only withdraw stake and not yield.\\n     */\\n    function unStake(uint16 outcome, uint256 amount) external OnlyIfOpen /* put REENTRANCY GUARD */ { \\n        require(amount <= _stakes[msg.sender][outcome], \\\"Not enough stake, adjust amount.\\\");\\n        require(amount <= maxWithdraw(msg.sender, outcome), \\\"Amount too big.\\\");\\n\\n        _stakes[msg.sender][outcome] -= amount;\\n        totalStakes -= amount;\\n        uint256 shares = vaultAPI.withdraw(amount, msg.sender, address(this));\\n        _shares[msg.sender][outcome] -= shares;\\n        _sharesByOutcome[outcome] -= shares;\\n        _stakeByOutcome[outcome] -= amount;\\n\\n        emit UnStaked(msg.sender, outcome, amount);\\n    }\\n\\n    \\n    /**\\n     * metdodo close pool?\\n\\t *   -retira todos os fundos do vault\\n\\t *   -isOpen = false\\n\\t *  -restrito a resultController\\n\\t * PROBLEMA:\\n\\t *\\t-\\u00e9 preciso capturar os valores agregados do vault no momento do fechamento e calcular a pre\\u00e7o na pool pra distrubuir o premio\\n\\t *\\t    -como o padr\\u00e3o \\u00e9 agnostico em rela\\u00e7\\u00e3o a como as shares s\\u00e3o precificadas, isso pode ser um problema pois poderia ter diverg\\u00eancia\\n     *      -\\n     */\\n    \\n    /**\\n     * closes pool and withdraws all assets from vault\\n     */\\n    // function closePool(uint16 result) external {\\n    //     require(msg.sender == address(resultController), \\\"You can't close the Pool.\\\");\\n    //     /**logic used in \\\"close&redeem\\\" format */\\n    //         /*capturing pool aggregated values at moment of closing*/\\n    //         // closingLiq = vaultAPI.totalAssets();\\n    //         // closingShareSupply = vaultAPI.totalSupply();\\n    //         // \\n    //         // vaultAPI.redeem(vaultAPI.totalSupply(), address(this), address(this));\\n    //     // isOpen = false;\\n    //     emit PoolClosed(result, totalStakes, getYield());\\n    // }\\n\\n    /**\\n     * pulls balance from the pool after closing.\\n     * @notice needs to be called for each outcome picked.\\n     */\\n    function withdraw(uint16 outcome) external {\\n        require(hasResult(), \\\"Pool is still open! Use unStake()\\\");\\n        uint256 shares = _shares[msg.sender][outcome];\\n        require(shares != 0, \\\"Nothing to withdraw. Adjust outcome.\\\");\\n        uint256 stake_ = _stakes[msg.sender][outcome];\\n        if(outcome == resultController.getResult()){ /**includes prize */\\n            uint256 prize = previewPrize(outcome, shares, stake_);\\n            _shares[msg.sender][outcome] = 0;\\n            totalStakes -= stake_;\\n            vaultAPI.withdraw(prize + stake_, msg.sender, address(this));\\n            yieldWithdrawn += prize;\\n            _sharesByOutcome[outcome] -= shares;\\n            _stakeByOutcome[outcome] -=stake_;\\n            emit Withdrawn(msg.sender, outcome, prize, stake_);\\n            return;\\n        }\\n        _shares[msg.sender][outcome] = 0;\\n        totalStakes -= stake_;\\n        uint256 totAss = vaultAPI.totalAssets();\\n        vaultAPI.withdraw(stake_ < totAss ? stake_ : totAss, msg.sender, address(this));\\n        emit Withdrawn(msg.sender, outcome, 0, stake_);\\n    }\\n\\n    /**GETTERS */\\n\\n    /**\\n     * @notice returns the value of the current prize if the oucome provided was the end result.\\n     * @param outcome the outcome predicted to be the end result.\\n     * @param shares number of shares related to `outcome`.\\n     * @param stake_ amount staked in `outcome`.\\n     */\\n    function previewPrize(uint16 outcome, uint256 shares, uint256 stake_) public view returns(uint256) {\\n        uint256 totalYield = getYield();\\n        uint256 indYield = _safeSub(vaultAPI.convertToAssets(shares), stake_);\\n        uint256 outcomeYield = _safeSub(vaultAPI.convertToAssets(_sharesByOutcome[outcome]), _stakeByOutcome[outcome]);\\n        return outcomeYield > 0? (indYield * totalYield) / outcomeYield : 0;\\n    }\\n\\n    /**\\n     * returns total yield generated by the pool\\n     */\\n    function getYield() public view returns (uint256) {\\n        // uint256 shares = vaultAPI.balanceOf(address(this));\\n        // return vaultAPI.convertToAssets(shares) - totalStakes;\\n        return _safeSub(vaultAPI.totalAssets(), totalStakes);\\n    }\\n\\n    function getStakeByOutcome(uint16 outcome) public view returns (uint256) {\\n        return _stakeByOutcome[outcome];\\n    }\\n\\n    /**returns total amount staked in a given outcome */\\n    function getSharesByOutcome(uint16 outcome) public view returns (uint256) {\\n        return _sharesByOutcome[outcome];\\n    }\\n\\n    /**returns total amount staked by an account in a given outcome */\\n    function getStake(address staker, uint16 outcome) external view returns (uint256) {\\n        return _stakes[staker][outcome];\\n    }\\n\\n    function getShares(address owner, uint16 outcome) external view returns (uint256) {\\n        return _shares[owner][outcome];\\n    }\\n\\n    /**\\n     * @notice returns the maximum amount that can be deposited via the API. Usually defined by the vault protocol.\\n     */\\n    function maxDeposit() public view returns  (uint256) {\\n        return vaultAPI.maxDeposit(address(this));\\n    }\\n\\n    /**\\n     * @notice returns the maximum amount withdrawable in a tx for a given pair (user, outcome).\\n     * @param owner the user that staked the assets and therefore has a claim to part of pool balance.\\n     * @param outcome the outcome related to this particular balance.\\n     */\\n    function maxWithdraw(address owner, uint16 outcome) public view returns (uint256){\\n        uint256 maxPool = vaultAPI.maxWithdraw(address(this));\\n        uint256 stake_ = _stakes[owner][outcome];\\n        \\n        if(!hasResult())\\n          return _min(stake_, maxPool);\\n        \\n        if(outcome == resultController.getResult()) {\\n          uint256 bal = previewPrize(outcome, _shares[owner][outcome], stake_) + stake_;\\n          return _min(bal, maxPool);\\n        }\\n        return _min(stake_, maxPool);\\n    }\\n\\n    function hasResult() public view returns (bool) {\\n        return resultController.hasResult();\\n    }\\n\\n}\",\"keccak256\":\"0x79e52e4485290e04d461c550ef0955c0d19de8baddf2355332770403eeab8cec\",\"license\":\"MIT\"},\"contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC4626 is IERC20 {\\n    \\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    // function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n\\n    function previewDeposit(uint256 assets) external view returns (uint256);\\n\\n    // function previewMint(uint256 shares) external view returns (uint256);\\n\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n\\n    // function previewRedeem(uint256 shares) external view returns (uint256);\\n\\n    function maxDeposit(address) external view returns (uint256) ;\\n\\n    // function maxMint(address) external view returns (uint256);\\n\\n    function maxWithdraw(address owner) external view returns (uint256);\\n\\n    // function maxRedeem(address owner) external view returns (uint256);\\n\\n}\",\"keccak256\":\"0x6340fd952e9be69535d875dcfeeab9061b33f3d31f004412d362f5e923ac4b30\",\"license\":\"MIT\"},\"contracts/interfaces/IResultController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IResultController {\\n\\n  event resultGenerated (address indexed controller, uint256 indexed result);\\n\\n  function hasResult () external view returns (bool);\\n  \\n  function getResult () external view returns (uint256);\\n  \\n  function getOutcomesCount () external view returns (uint256);\\n  \\n  function getOutcomeName (uint256 index) external view returns (bytes32);\\n  \\n  function getGame () external view returns (bytes32);\\n\\n}\",\"keccak256\":\"0x619a43c4944376159a3c1678ddfb696f213e74d4764a45ba57ad92968a41c93a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612eda806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063236aea2e14610030575b600080fd5b61004a6004803603810190610045919061017c565b61004c565b005b600083838360405161005d9061010c565b610069939291906101de565b604051809103906000f080158015610085573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f583aa3202641e70abf6c4e526dd0bf713aa272b67f557ed30f2e40a37d985a8e86866040516100fe929190610215565b60405180910390a450505050565b612c668061023f83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101498261011e565b9050919050565b6101598161013e565b811461016457600080fd5b50565b60008135905061017681610150565b92915050565b60008060006060848603121561019557610194610119565b5b60006101a386828701610167565b93505060206101b486828701610167565b92505060406101c586828701610167565b9150509250925092565b6101d88161013e565b82525050565b60006060820190506101f360008301866101cf565b61020060208301856101cf565b61020d60408301846101cf565b949350505050565b600060408201905061022a60008301856101cf565b61023760208301846101cf565b939250505056fe60e06040523480156200001157600080fd5b5060405162002c6638038062002c668339818101604052810190620000379190620001ec565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505060805173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016200013292919062000274565b6020604051808303816000875af115801562000152573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001789190620002de565b5050505062000310565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001b48262000187565b9050919050565b620001c681620001a7565b8114620001d257600080fd5b50565b600081519050620001e681620001bb565b92915050565b60008060006060848603121562000208576200020762000182565b5b60006200021886828701620001d5565b93505060206200022b86828701620001d5565b92505060406200023e86828701620001d5565b9150509250925092565b6200025381620001a7565b82525050565b6000819050919050565b6200026e8162000259565b82525050565b60006040820190506200028b600083018562000248565b6200029a602083018462000263565b9392505050565b60008115159050919050565b620002b881620002a1565b8114620002c457600080fd5b50565b600081519050620002d881620002ad565b92915050565b600060208284031215620002f757620002f662000182565b5b60006200030784828501620002c7565b91505092915050565b60805160a05160c0516128a1620003c5600039600081816105f001528181610a4301528181610c3f01528181610cd001528181610deb01528181610e9201528181610f9f0152818161103e015281816110b00152818161114f015281816117080152611c2e01526000818161039f015281816109240152818161108701528181611266015261150a0152600081816107bd0152818161142d015281816115de01528181611a2b0152611b0801526128a16000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063767123ec116100a2578063913420281161007157806391342028146102d157806392f3eb3814610301578063b6cce5e214610331578063bf9befb11461034d578063c180e49e1461036b57610116565b8063767123ec146102495780637c262871146102675780637f3db09214610285578063863ed73d146102b557610116565b80633d972839116100e95780633d97283914610191578063574f0ac8146101ad5780636083e59a146101dd57806363bc1963146101fb57806369b9f9d11461021957610116565b80631053eaa31461011b5780631e3339dd14610139578063313b9b7b1461015757806338d52e0f14610173575b600080fd5b61012361039b565b6040516101309190611e6d565b60405180910390f35b610141610431565b60405161014e9190611ea1565b60405180910390f35b610171600480360381019061016c9190611f27565b610437565b005b61017b6107bb565b6040516101889190611fe6565b60405180910390f35b6101ab60048036038101906101a69190612001565b6107df565b005b6101c760048036038101906101c2919061202e565b610dd7565b6040516101d49190611ea1565b60405180910390f35b6101e5610f9b565b6040516101f29190611ea1565b60405180910390f35b61020361103c565b60405161021091906120a2565b60405180910390f35b610233600480360381019061022e9190612001565b611060565b6040516102409190611ea1565b60405180910390f35b610251611085565b60405161025e91906120de565b60405180910390f35b61026f6110a9565b60405161027c9190611ea1565b60405180910390f35b61029f600480360381019061029a9190612137565b61114a565b6040516102ac9190611ea1565b60405180910390f35b6102cf60048036038101906102ca9190611f27565b611398565b005b6102eb60048036038101906102e69190612137565b6118d1565b6040516102f89190611ea1565b60405180910390f35b61031b60048036038101906103169190612137565b611933565b6040516103289190611ea1565b60405180910390f35b61034b60048036038101906103469190612177565b611996565b005b610355611de7565b6040516103629190611ea1565b60405180910390f35b61038560048036038101906103809190612001565b611ded565b6040516103929190611ea1565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631053eaa36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042c91906121d0565b905090565b60055481565b61043f61039b565b1561047f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104769061225a565b60405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff16815260200190815260200160002054811115610519576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610510906122c6565b60405180910390fd5b610523338361114a565b811115610565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055c90612332565b60405180910390fd5b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff16815260200190815260200160002060008282546105cc9190612381565b9250508190555080600460008282546105e59190612381565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b460af948333306040518463ffffffff1660e01b815260040161064b939291906123c4565b6020604051808303816000875af115801561066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e9190612410565b905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff16815260200190815260200160002060008282546106f89190612381565b9250508190555080600260008561ffff1661ffff168152602001908152602001600020600082825461072a9190612381565b9250508190555081600360008561ffff1661ffff168152602001908152602001600020600082825461075c9190612381565b925050819055508261ffff163373ffffffffffffffffffffffffffffffffffffffff167f173e1d9feeeac86f9df1a7a5419b51747340c8fbde4107987dafd0466d25a6ee846040516107ae9190611ea1565b60405180910390a3505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6107e761039b565b610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081d906124af565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff168152602001908152602001600020549050600081036108c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bd90612541565b60405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff1681526020019081526020016000205490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663de2927896040518163ffffffff1660e01b8152600401602060405180830381865afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b19190612410565b8361ffff1603610bc45760006109c8848484610dd7565b90506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008661ffff1661ffff168152602001908152602001600020819055508160046000828254610a3a9190612381565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b460af948383610a899190612561565b33306040518463ffffffff1660e01b8152600401610aa9939291906123c4565b6020604051808303816000875af1158015610ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aec9190612410565b508060056000828254610aff9190612561565b9250508190555082600260008661ffff1661ffff1681526020019081526020016000206000828254610b319190612381565b9250508190555081600360008661ffff1661ffff1681526020019081526020016000206000828254610b639190612381565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f705b4547f20b6c26740e28f69ae3e938854f1021d63cce5a39e4ab27ab4c1c9b858385604051610bb4939291906125a4565b60405180910390a2505050610dd4565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff168152602001908152602001600020819055508060046000828254610c349190612381565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccc9190612410565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b460af94828410610d175782610d19565b835b33306040518463ffffffff1660e01b8152600401610d39939291906123c4565b6020604051808303816000875af1158015610d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7c9190612410565b503373ffffffffffffffffffffffffffffffffffffffff167f705b4547f20b6c26740e28f69ae3e938854f1021d63cce5a39e4ab27ab4c1c9b85600085604051610dc893929190612616565b60405180910390a25050505b50565b600080610de26110a9565b90506000610e897f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166307a2d13a876040518263ffffffff1660e01b8152600401610e429190611ea1565b602060405180830381865afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e839190612410565b85611e12565b90506000610f667f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166307a2d13a600260008b61ffff1661ffff168152602001908152602001600020546040518263ffffffff1660e01b8152600401610f049190611ea1565b602060405180830381865afa158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f459190612410565b600360008a61ffff1661ffff16815260200190815260200160002054611e12565b905060008111610f77576000610f8f565b808383610f84919061264d565b610f8e91906126be565b5b93505050509392505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663402d267d306040518263ffffffff1660e01b8152600401610ff691906126ef565b602060405180830381865afa158015611013573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110379190612410565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600360008361ffff1661ffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006111457f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa158015611119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113d9190612410565b600454611e12565b905090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ce96cb77306040518263ffffffff1660e01b81526004016111a691906126ef565b602060405180830381865afa1580156111c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e79190612410565b905060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff16815260200190815260200160002054905061124d61039b565b6112645761125b8183611e39565b92505050611392565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663de2927896040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f39190612410565b8461ffff16036113835760008161136386600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008961ffff1661ffff1681526020019081526020016000205485610dd7565b61136d9190612561565b90506113798184611e39565b9350505050611392565b61138d8183611e39565b925050505b92915050565b6113a061039b565b156113e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d79061225a565b60405180910390fd5b6113e8610f9b565b81111561142a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142190612332565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b815260040161148692919061270a565b602060405180830381865afa1580156114a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c79190612410565b1015611508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ff9061277f565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638033c00d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115979190612410565b8261ffff16106115dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d3906127eb565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016116399392919061280b565b6020604051808303816000875af1158015611658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167c91906121d0565b50806004600082825461168f9190612561565b92505081905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff16815260200190815260200160002060008282546116fd9190612561565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636e553f6583306040518363ffffffff1660e01b8152600401611761929190612842565b6020604051808303816000875af1158015611780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a49190612410565b905080600260008561ffff1661ffff16815260200190815260200160002060008282546117d19190612561565b9250508190555081600360008561ffff1661ffff16815260200190815260200160002060008282546118039190612561565b9250508190555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff16815260200190815260200160002060008282546118729190612561565b925050819055508261ffff163373ffffffffffffffffffffffffffffffffffffffff167f074be96cbda9766dbe0c925ac833fc192f07104c123e767598a5c06096e6e03d846040516118c49190611ea1565b60405180910390a3505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff16815260200190815260200160002054905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff16815260200190815260200160002054905092915050565b61199e61039b565b156119de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d59061225a565b60405180910390fd5b6119e6610f9b565b811115611a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1f90612332565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611a8492919061270a565b602060405180830381865afa158015611aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac59190612410565b1015611b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afd9061277f565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611b639392919061280b565b6020604051808303816000875af1158015611b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba691906121d0565b508060046000828254611bb99190612561565b92505081905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008061ffff1681526020019081526020016000206000828254611c239190612561565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636e553f6583306040518363ffffffff1660e01b8152600401611c87929190612842565b6020604051808303816000875af1158015611ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cca9190612410565b905080600260008061ffff1681526020019081526020016000206000828254611cf39190612561565b9250508190555081600360008061ffff1681526020019081526020016000206000828254611d219190612561565b9250508190555081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008061ffff1681526020019081526020016000206000828254611d8c9190612561565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff167f074be96cbda9766dbe0c925ac833fc192f07104c123e767598a5c06096e6e03d84604051611ddb9190611ea1565b60405180910390a35050565b60045481565b6000600260008361ffff1661ffff168152602001908152602001600020549050919050565b60008183148284101715611e2557600090505b81831115611e335781830390505b92915050565b6000818310611e485781611e4a565b825b905092915050565b60008115159050919050565b611e6781611e52565b82525050565b6000602082019050611e826000830184611e5e565b92915050565b6000819050919050565b611e9b81611e88565b82525050565b6000602082019050611eb66000830184611e92565b92915050565b600080fd5b600061ffff82169050919050565b611ed881611ec1565b8114611ee357600080fd5b50565b600081359050611ef581611ecf565b92915050565b611f0481611e88565b8114611f0f57600080fd5b50565b600081359050611f2181611efb565b92915050565b60008060408385031215611f3e57611f3d611ebc565b5b6000611f4c85828601611ee6565b9250506020611f5d85828601611f12565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611fac611fa7611fa284611f67565b611f87565b611f67565b9050919050565b6000611fbe82611f91565b9050919050565b6000611fd082611fb3565b9050919050565b611fe081611fc5565b82525050565b6000602082019050611ffb6000830184611fd7565b92915050565b60006020828403121561201757612016611ebc565b5b600061202584828501611ee6565b91505092915050565b60008060006060848603121561204757612046611ebc565b5b600061205586828701611ee6565b935050602061206686828701611f12565b925050604061207786828701611f12565b9150509250925092565b600061208c82611fb3565b9050919050565b61209c81612081565b82525050565b60006020820190506120b76000830184612093565b92915050565b60006120c882611fb3565b9050919050565b6120d8816120bd565b82525050565b60006020820190506120f360008301846120cf565b92915050565b600061210482611f67565b9050919050565b612114816120f9565b811461211f57600080fd5b50565b6000813590506121318161210b565b92915050565b6000806040838503121561214e5761214d611ebc565b5b600061215c85828601612122565b925050602061216d85828601611ee6565b9150509250929050565b60006020828403121561218d5761218c611ebc565b5b600061219b84828501611f12565b91505092915050565b6121ad81611e52565b81146121b857600080fd5b50565b6000815190506121ca816121a4565b92915050565b6000602082840312156121e6576121e5611ebc565b5b60006121f4848285016121bb565b91505092915050565b600082825260208201905092915050565b7f506f6f6c20616c726561647920636c6f73656400000000000000000000000000600082015250565b60006122446013836121fd565b915061224f8261220e565b602082019050919050565b6000602082019050818103600083015261227381612237565b9050919050565b7f4e6f7420656e6f756768207374616b652c2061646a75737420616d6f756e742e600082015250565b60006122b06020836121fd565b91506122bb8261227a565b602082019050919050565b600060208201905081810360008301526122df816122a3565b9050919050565b7f416d6f756e7420746f6f206269672e0000000000000000000000000000000000600082015250565b600061231c600f836121fd565b9150612327826122e6565b602082019050919050565b6000602082019050818103600083015261234b8161230f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061238c82611e88565b915061239783611e88565b92508282039050818111156123af576123ae612352565b5b92915050565b6123be816120f9565b82525050565b60006060820190506123d96000830186611e92565b6123e660208301856123b5565b6123f360408301846123b5565b949350505050565b60008151905061240a81611efb565b92915050565b60006020828403121561242657612425611ebc565b5b6000612434848285016123fb565b91505092915050565b7f506f6f6c206973207374696c6c206f70656e212055736520756e5374616b652860008201527f2900000000000000000000000000000000000000000000000000000000000000602082015250565b60006124996021836121fd565b91506124a48261243d565b604082019050919050565b600060208201905081810360008301526124c88161248c565b9050919050565b7f4e6f7468696e6720746f2077697468647261772e2041646a757374206f75746360008201527f6f6d652e00000000000000000000000000000000000000000000000000000000602082015250565b600061252b6024836121fd565b9150612536826124cf565b604082019050919050565b6000602082019050818103600083015261255a8161251e565b9050919050565b600061256c82611e88565b915061257783611e88565b925082820190508082111561258f5761258e612352565b5b92915050565b61259e81611ec1565b82525050565b60006060820190506125b96000830186612595565b6125c66020830185611e92565b6125d36040830184611e92565b949350505050565b6000819050919050565b60006126006125fb6125f6846125db565b611f87565b611e88565b9050919050565b612610816125e5565b82525050565b600060608201905061262b6000830186612595565b6126386020830185612607565b6126456040830184611e92565b949350505050565b600061265882611e88565b915061266383611e88565b925082820261267181611e88565b9150828204841483151761268857612687612352565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006126c982611e88565b91506126d483611e88565b9250826126e4576126e361268f565b5b828204905092915050565b600060208201905061270460008301846123b5565b92915050565b600060408201905061271f60008301856123b5565b61272c60208301846123b5565b9392505050565b7f4e6f7420656e6f75676820616c6c6f77616e63652e0000000000000000000000600082015250565b60006127696015836121fd565b915061277482612733565b602082019050919050565b600060208201905081810360008301526127988161275c565b9050919050565b7f496e76616c6964207069636b0000000000000000000000000000000000000000600082015250565b60006127d5600c836121fd565b91506127e08261279f565b602082019050919050565b60006020820190508181036000830152612804816127c8565b9050919050565b600060608201905061282060008301866123b5565b61282d60208301856123b5565b61283a6040830184611e92565b949350505050565b60006040820190506128576000830185611e92565b61286460208301846123b5565b939250505056fea2646970667358221220c4c5335335bd65904c8da68c7cb51c4b0a69d1eb48299a8b22c35d6b20745dea64736f6c63430008140033a264697066735822122066a33e2aa99c12e4c01cbd3161d442ba81631a78b9d52b62e904b29e5765f67164736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063236aea2e14610030575b600080fd5b61004a6004803603810190610045919061017c565b61004c565b005b600083838360405161005d9061010c565b610069939291906101de565b604051809103906000f080158015610085573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f583aa3202641e70abf6c4e526dd0bf713aa272b67f557ed30f2e40a37d985a8e86866040516100fe929190610215565b60405180910390a450505050565b612c668061023f83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101498261011e565b9050919050565b6101598161013e565b811461016457600080fd5b50565b60008135905061017681610150565b92915050565b60008060006060848603121561019557610194610119565b5b60006101a386828701610167565b93505060206101b486828701610167565b92505060406101c586828701610167565b9150509250925092565b6101d88161013e565b82525050565b60006060820190506101f360008301866101cf565b61020060208301856101cf565b61020d60408301846101cf565b949350505050565b600060408201905061022a60008301856101cf565b61023760208301846101cf565b939250505056fe60e06040523480156200001157600080fd5b5060405162002c6638038062002c668339818101604052810190620000379190620001ec565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505060805173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016200013292919062000274565b6020604051808303816000875af115801562000152573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001789190620002de565b5050505062000310565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001b48262000187565b9050919050565b620001c681620001a7565b8114620001d257600080fd5b50565b600081519050620001e681620001bb565b92915050565b60008060006060848603121562000208576200020762000182565b5b60006200021886828701620001d5565b93505060206200022b86828701620001d5565b92505060406200023e86828701620001d5565b9150509250925092565b6200025381620001a7565b82525050565b6000819050919050565b6200026e8162000259565b82525050565b60006040820190506200028b600083018562000248565b6200029a602083018462000263565b9392505050565b60008115159050919050565b620002b881620002a1565b8114620002c457600080fd5b50565b600081519050620002d881620002ad565b92915050565b600060208284031215620002f757620002f662000182565b5b60006200030784828501620002c7565b91505092915050565b60805160a05160c0516128a1620003c5600039600081816105f001528181610a4301528181610c3f01528181610cd001528181610deb01528181610e9201528181610f9f0152818161103e015281816110b00152818161114f015281816117080152611c2e01526000818161039f015281816109240152818161108701528181611266015261150a0152600081816107bd0152818161142d015281816115de01528181611a2b0152611b0801526128a16000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063767123ec116100a2578063913420281161007157806391342028146102d157806392f3eb3814610301578063b6cce5e214610331578063bf9befb11461034d578063c180e49e1461036b57610116565b8063767123ec146102495780637c262871146102675780637f3db09214610285578063863ed73d146102b557610116565b80633d972839116100e95780633d97283914610191578063574f0ac8146101ad5780636083e59a146101dd57806363bc1963146101fb57806369b9f9d11461021957610116565b80631053eaa31461011b5780631e3339dd14610139578063313b9b7b1461015757806338d52e0f14610173575b600080fd5b61012361039b565b6040516101309190611e6d565b60405180910390f35b610141610431565b60405161014e9190611ea1565b60405180910390f35b610171600480360381019061016c9190611f27565b610437565b005b61017b6107bb565b6040516101889190611fe6565b60405180910390f35b6101ab60048036038101906101a69190612001565b6107df565b005b6101c760048036038101906101c2919061202e565b610dd7565b6040516101d49190611ea1565b60405180910390f35b6101e5610f9b565b6040516101f29190611ea1565b60405180910390f35b61020361103c565b60405161021091906120a2565b60405180910390f35b610233600480360381019061022e9190612001565b611060565b6040516102409190611ea1565b60405180910390f35b610251611085565b60405161025e91906120de565b60405180910390f35b61026f6110a9565b60405161027c9190611ea1565b60405180910390f35b61029f600480360381019061029a9190612137565b61114a565b6040516102ac9190611ea1565b60405180910390f35b6102cf60048036038101906102ca9190611f27565b611398565b005b6102eb60048036038101906102e69190612137565b6118d1565b6040516102f89190611ea1565b60405180910390f35b61031b60048036038101906103169190612137565b611933565b6040516103289190611ea1565b60405180910390f35b61034b60048036038101906103469190612177565b611996565b005b610355611de7565b6040516103629190611ea1565b60405180910390f35b61038560048036038101906103809190612001565b611ded565b6040516103929190611ea1565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631053eaa36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042c91906121d0565b905090565b60055481565b61043f61039b565b1561047f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104769061225a565b60405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff16815260200190815260200160002054811115610519576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610510906122c6565b60405180910390fd5b610523338361114a565b811115610565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055c90612332565b60405180910390fd5b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff16815260200190815260200160002060008282546105cc9190612381565b9250508190555080600460008282546105e59190612381565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b460af948333306040518463ffffffff1660e01b815260040161064b939291906123c4565b6020604051808303816000875af115801561066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e9190612410565b905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff16815260200190815260200160002060008282546106f89190612381565b9250508190555080600260008561ffff1661ffff168152602001908152602001600020600082825461072a9190612381565b9250508190555081600360008561ffff1661ffff168152602001908152602001600020600082825461075c9190612381565b925050819055508261ffff163373ffffffffffffffffffffffffffffffffffffffff167f173e1d9feeeac86f9df1a7a5419b51747340c8fbde4107987dafd0466d25a6ee846040516107ae9190611ea1565b60405180910390a3505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6107e761039b565b610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081d906124af565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff168152602001908152602001600020549050600081036108c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bd90612541565b60405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff1681526020019081526020016000205490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663de2927896040518163ffffffff1660e01b8152600401602060405180830381865afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b19190612410565b8361ffff1603610bc45760006109c8848484610dd7565b90506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008661ffff1661ffff168152602001908152602001600020819055508160046000828254610a3a9190612381565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b460af948383610a899190612561565b33306040518463ffffffff1660e01b8152600401610aa9939291906123c4565b6020604051808303816000875af1158015610ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aec9190612410565b508060056000828254610aff9190612561565b9250508190555082600260008661ffff1661ffff1681526020019081526020016000206000828254610b319190612381565b9250508190555081600360008661ffff1661ffff1681526020019081526020016000206000828254610b639190612381565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f705b4547f20b6c26740e28f69ae3e938854f1021d63cce5a39e4ab27ab4c1c9b858385604051610bb4939291906125a4565b60405180910390a2505050610dd4565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff168152602001908152602001600020819055508060046000828254610c349190612381565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccc9190612410565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b460af94828410610d175782610d19565b835b33306040518463ffffffff1660e01b8152600401610d39939291906123c4565b6020604051808303816000875af1158015610d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7c9190612410565b503373ffffffffffffffffffffffffffffffffffffffff167f705b4547f20b6c26740e28f69ae3e938854f1021d63cce5a39e4ab27ab4c1c9b85600085604051610dc893929190612616565b60405180910390a25050505b50565b600080610de26110a9565b90506000610e897f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166307a2d13a876040518263ffffffff1660e01b8152600401610e429190611ea1565b602060405180830381865afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e839190612410565b85611e12565b90506000610f667f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166307a2d13a600260008b61ffff1661ffff168152602001908152602001600020546040518263ffffffff1660e01b8152600401610f049190611ea1565b602060405180830381865afa158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f459190612410565b600360008a61ffff1661ffff16815260200190815260200160002054611e12565b905060008111610f77576000610f8f565b808383610f84919061264d565b610f8e91906126be565b5b93505050509392505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663402d267d306040518263ffffffff1660e01b8152600401610ff691906126ef565b602060405180830381865afa158015611013573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110379190612410565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600360008361ffff1661ffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006111457f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa158015611119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113d9190612410565b600454611e12565b905090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ce96cb77306040518263ffffffff1660e01b81526004016111a691906126ef565b602060405180830381865afa1580156111c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e79190612410565b905060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff16815260200190815260200160002054905061124d61039b565b6112645761125b8183611e39565b92505050611392565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663de2927896040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f39190612410565b8461ffff16036113835760008161136386600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008961ffff1661ffff1681526020019081526020016000205485610dd7565b61136d9190612561565b90506113798184611e39565b9350505050611392565b61138d8183611e39565b925050505b92915050565b6113a061039b565b156113e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d79061225a565b60405180910390fd5b6113e8610f9b565b81111561142a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142190612332565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b815260040161148692919061270a565b602060405180830381865afa1580156114a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c79190612410565b1015611508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ff9061277f565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638033c00d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115979190612410565b8261ffff16106115dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d3906127eb565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016116399392919061280b565b6020604051808303816000875af1158015611658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167c91906121d0565b50806004600082825461168f9190612561565b92505081905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff16815260200190815260200160002060008282546116fd9190612561565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636e553f6583306040518363ffffffff1660e01b8152600401611761929190612842565b6020604051808303816000875af1158015611780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a49190612410565b905080600260008561ffff1661ffff16815260200190815260200160002060008282546117d19190612561565b9250508190555081600360008561ffff1661ffff16815260200190815260200160002060008282546118039190612561565b9250508190555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff16815260200190815260200160002060008282546118729190612561565b925050819055508261ffff163373ffffffffffffffffffffffffffffffffffffffff167f074be96cbda9766dbe0c925ac833fc192f07104c123e767598a5c06096e6e03d846040516118c49190611ea1565b60405180910390a3505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff16815260200190815260200160002054905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff16815260200190815260200160002054905092915050565b61199e61039b565b156119de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d59061225a565b60405180910390fd5b6119e6610f9b565b811115611a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1f90612332565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611a8492919061270a565b602060405180830381865afa158015611aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac59190612410565b1015611b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afd9061277f565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611b639392919061280b565b6020604051808303816000875af1158015611b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba691906121d0565b508060046000828254611bb99190612561565b92505081905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008061ffff1681526020019081526020016000206000828254611c239190612561565b9250508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636e553f6583306040518363ffffffff1660e01b8152600401611c87929190612842565b6020604051808303816000875af1158015611ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cca9190612410565b905080600260008061ffff1681526020019081526020016000206000828254611cf39190612561565b9250508190555081600360008061ffff1681526020019081526020016000206000828254611d219190612561565b9250508190555081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008061ffff1681526020019081526020016000206000828254611d8c9190612561565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff167f074be96cbda9766dbe0c925ac833fc192f07104c123e767598a5c06096e6e03d84604051611ddb9190611ea1565b60405180910390a35050565b60045481565b6000600260008361ffff1661ffff168152602001908152602001600020549050919050565b60008183148284101715611e2557600090505b81831115611e335781830390505b92915050565b6000818310611e485781611e4a565b825b905092915050565b60008115159050919050565b611e6781611e52565b82525050565b6000602082019050611e826000830184611e5e565b92915050565b6000819050919050565b611e9b81611e88565b82525050565b6000602082019050611eb66000830184611e92565b92915050565b600080fd5b600061ffff82169050919050565b611ed881611ec1565b8114611ee357600080fd5b50565b600081359050611ef581611ecf565b92915050565b611f0481611e88565b8114611f0f57600080fd5b50565b600081359050611f2181611efb565b92915050565b60008060408385031215611f3e57611f3d611ebc565b5b6000611f4c85828601611ee6565b9250506020611f5d85828601611f12565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611fac611fa7611fa284611f67565b611f87565b611f67565b9050919050565b6000611fbe82611f91565b9050919050565b6000611fd082611fb3565b9050919050565b611fe081611fc5565b82525050565b6000602082019050611ffb6000830184611fd7565b92915050565b60006020828403121561201757612016611ebc565b5b600061202584828501611ee6565b91505092915050565b60008060006060848603121561204757612046611ebc565b5b600061205586828701611ee6565b935050602061206686828701611f12565b925050604061207786828701611f12565b9150509250925092565b600061208c82611fb3565b9050919050565b61209c81612081565b82525050565b60006020820190506120b76000830184612093565b92915050565b60006120c882611fb3565b9050919050565b6120d8816120bd565b82525050565b60006020820190506120f360008301846120cf565b92915050565b600061210482611f67565b9050919050565b612114816120f9565b811461211f57600080fd5b50565b6000813590506121318161210b565b92915050565b6000806040838503121561214e5761214d611ebc565b5b600061215c85828601612122565b925050602061216d85828601611ee6565b9150509250929050565b60006020828403121561218d5761218c611ebc565b5b600061219b84828501611f12565b91505092915050565b6121ad81611e52565b81146121b857600080fd5b50565b6000815190506121ca816121a4565b92915050565b6000602082840312156121e6576121e5611ebc565b5b60006121f4848285016121bb565b91505092915050565b600082825260208201905092915050565b7f506f6f6c20616c726561647920636c6f73656400000000000000000000000000600082015250565b60006122446013836121fd565b915061224f8261220e565b602082019050919050565b6000602082019050818103600083015261227381612237565b9050919050565b7f4e6f7420656e6f756768207374616b652c2061646a75737420616d6f756e742e600082015250565b60006122b06020836121fd565b91506122bb8261227a565b602082019050919050565b600060208201905081810360008301526122df816122a3565b9050919050565b7f416d6f756e7420746f6f206269672e0000000000000000000000000000000000600082015250565b600061231c600f836121fd565b9150612327826122e6565b602082019050919050565b6000602082019050818103600083015261234b8161230f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061238c82611e88565b915061239783611e88565b92508282039050818111156123af576123ae612352565b5b92915050565b6123be816120f9565b82525050565b60006060820190506123d96000830186611e92565b6123e660208301856123b5565b6123f360408301846123b5565b949350505050565b60008151905061240a81611efb565b92915050565b60006020828403121561242657612425611ebc565b5b6000612434848285016123fb565b91505092915050565b7f506f6f6c206973207374696c6c206f70656e212055736520756e5374616b652860008201527f2900000000000000000000000000000000000000000000000000000000000000602082015250565b60006124996021836121fd565b91506124a48261243d565b604082019050919050565b600060208201905081810360008301526124c88161248c565b9050919050565b7f4e6f7468696e6720746f2077697468647261772e2041646a757374206f75746360008201527f6f6d652e00000000000000000000000000000000000000000000000000000000602082015250565b600061252b6024836121fd565b9150612536826124cf565b604082019050919050565b6000602082019050818103600083015261255a8161251e565b9050919050565b600061256c82611e88565b915061257783611e88565b925082820190508082111561258f5761258e612352565b5b92915050565b61259e81611ec1565b82525050565b60006060820190506125b96000830186612595565b6125c66020830185611e92565b6125d36040830184611e92565b949350505050565b6000819050919050565b60006126006125fb6125f6846125db565b611f87565b611e88565b9050919050565b612610816125e5565b82525050565b600060608201905061262b6000830186612595565b6126386020830185612607565b6126456040830184611e92565b949350505050565b600061265882611e88565b915061266383611e88565b925082820261267181611e88565b9150828204841483151761268857612687612352565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006126c982611e88565b91506126d483611e88565b9250826126e4576126e361268f565b5b828204905092915050565b600060208201905061270460008301846123b5565b92915050565b600060408201905061271f60008301856123b5565b61272c60208301846123b5565b9392505050565b7f4e6f7420656e6f75676820616c6c6f77616e63652e0000000000000000000000600082015250565b60006127696015836121fd565b915061277482612733565b602082019050919050565b600060208201905081810360008301526127988161275c565b9050919050565b7f496e76616c6964207069636b0000000000000000000000000000000000000000600082015250565b60006127d5600c836121fd565b91506127e08261279f565b602082019050919050565b60006020820190508181036000830152612804816127c8565b9050919050565b600060608201905061282060008301866123b5565b61282d60208301856123b5565b61283a6040830184611e92565b949350505050565b60006040820190506128576000830185611e92565b61286460208301846123b5565b939250505056fea2646970667358221220c4c5335335bd65904c8da68c7cb51c4b0a69d1eb48299a8b22c35d6b20745dea64736f6c63430008140033a264697066735822122066a33e2aa99c12e4c01cbd3161d442ba81631a78b9d52b62e904b29e5765f67164736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}