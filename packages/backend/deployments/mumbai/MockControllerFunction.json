{
  "address": "0x6C17A4607A15B53331469319CE6Ea129a31aB0Cb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_donId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "name": "resultGenerated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_getOutcomesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGame",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getOutcomeName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOutcomesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasResult",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastError",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbda42cb7010d610f2ff25a3ebc6e475d74277912ad8d8aa5666fa59c3c9f4106",
  "receipt": {
    "to": null,
    "from": "0x099A294Bffb99Cb2350A6b6cA802712D9C96676A",
    "contractAddress": "0x6C17A4607A15B53331469319CE6Ea129a31aB0Cb",
    "transactionIndex": 8,
    "gasUsed": "2605254",
    "logsBloom": "0x
    "blockHash": "0xf16f07bd561cda119455da62aea28fd0051db44c9c566587d840a26a86f8d8f0",
    "transactionHash": "0xbda42cb7010d610f2ff25a3ebc6e475d74277912ad8d8aa5666fa59c3c9f4106",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 43427087,
        "transactionHash": "0xbda42cb7010d610f2ff25a3ebc6e475d74277912ad8d8aa5666fa59c3c9f4106",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000099a294bffb99cb2350a6b6ca802712d9c96676a",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000104b8fa438002c0000000000000000000000000000000000000000000000000ab7be859a4fa66d00000000000000000000000000000000000000000000043d95ef9194fe2a41eb0000000000000000000000000000000000000000000000000aa772f5f617a64100000000000000000000000000000000000000000000043d95ffdd24a2624217",
        "logIndex": 18,
        "blockHash": "0xf16f07bd561cda119455da62aea28fd0051db44c9c566587d840a26a86f8d8f0"
      }
    ],
    "blockNumber": 43427087,
    "cumulativeGasUsed": "3679718",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6E2dc0F9DB014aE19888F539E59285D2Ea04244C",
    "0x66756e2d706f6c79676f6e2d6d756d6261692d31000000000000000000000000",
    927
  ],
  "numDeployments": 1,
  "solcInputHash": "7242e37b091f253119cb47febfa89c7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_donId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"resultGenerated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_getOutcomesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGame\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOutcomeName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOutcomesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastError\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/functions/MockController.sol\":\"MockControllerFunction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Subscription interface.\\ninterface IFunctionsSubscriptions {\\n  struct Subscription {\\n    uint96 balance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Common LINK balance that is controlled by the Router to be used for all consumer requests.\\n    address owner; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The owner can fund/withdraw/cancel the subscription.\\n    uint96 blockedBalance; // \\u2550\\u2550\\u2557 LINK balance that is reserved to pay for pending consumer requests.\\n    address proposedOwner; // \\u2550\\u2550\\u255d For safely transferring sub ownership.\\n    address[] consumers; // \\u2550\\u2550\\u2550\\u2550\\u2578 Client contracts that can use the subscription\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n  }\\n\\n  struct Consumer {\\n    bool allowed; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Owner can fund/withdraw/cancel the sub.\\n    uint64 initiatedRequests; //   \\u2551 The number of requests that have been started\\n    uint64 completedRequests; // \\u2550\\u2550\\u255d The number of requests that have successfully completed or timed out\\n  }\\n\\n  /// @notice Get details about a subscription.\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\\n\\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscriptionsInRange(\\n    uint64 subscriptionIdStart,\\n    uint64 subscriptionIdEnd\\n  ) external view returns (Subscription[] memory);\\n\\n  /// @notice Get details about a consumer of a subscription.\\n  /// @param client - the consumer contract address\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\\n\\n  /// @notice Get details about the total amount of LINK within the system\\n  /// @return totalBalance - total Juels of LINK held by the contract\\n  function getTotalBalance() external view returns (uint96);\\n\\n  /// @notice Get details about the total number of subscription accounts\\n  /// @return count - total number of subscriptions in the system\\n  function getSubscriptionCount() external view returns (uint64);\\n\\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\\n  /// @dev The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\\n\\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\\n  /// @notice If amount is 0 the full balance will be withdrawn\\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\\n  /// @param recipient where to send the funds\\n  /// @param amount amount to withdraw\\n  function oracleWithdraw(address recipient, uint96 amount) external;\\n\\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n  /// @dev Only callable by the Router Owner\\n  /// @param subscriptionId subscription id\\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n  function ownerCancelSubscription(uint64 subscriptionId) external;\\n\\n  /// @notice Recover link sent with transfer instead of transferAndCall.\\n  /// @dev Only callable by the Router Owner\\n  /// @param to address to send link to\\n  function recoverFunds(address to) external;\\n\\n  /// @notice Create a new subscription.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscription() external returns (uint64);\\n\\n  /// @notice Create a new subscription and add a consumer.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\\n\\n  /// @notice Propose a new owner for a subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param newOwner - proposed new owner of the subscription\\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\\n\\n  /// @notice Accept an ownership transfer.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\\n\\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - Consumer to remove from the subscription\\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Add a consumer to a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - New consumer which can use the subscription\\n  function addConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Cancel a subscription\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param to - Where to send the remaining LINK to\\n  function cancelSubscription(uint64 subscriptionId, address to) external;\\n\\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\\n  /// @dev Used to disable subscription canceling while outstanding request are present.\\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\\n\\n  /// @notice Set subscription specific flags for a subscription.\\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param flags - desired flag values\\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\\n\\n  /// @notice Get flags for a given subscription.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return flags - current flag values\\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0x149120505b75984b482bc93eb8a59a0ab0bf812a67d8b4e70c5ec989400a7890\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsSubscriptions} from \\\"../interfaces/IFunctionsSubscriptions.sol\\\";\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"contracts/BaseResultController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IResultController} from \\\"./interfaces/IResultController.sol\\\";\\n\\ninterface IPool {\\n  function closePool(uint16 result) external;\\n}\\n\\nabstract contract BaseResultController is IResultController {\\n  bool private _hasResult;\\n  uint16 private _result;\\n  bytes32[] private _outcomeNames;\\n  \\n  constructor () {\\n    _hasResult = false;\\n  }\\n\\n  function _setResult (uint16 r) internal {\\n    require(!_hasResult, \\\"Already has result.\\\");\\n    require(r != 0, \\\"Result can't be ZERO.\\\");\\n\\n    _hasResult = true;\\n    _result = r;\\n    // \\n    // IPool _pool = IPool(pool);\\n    // _pool.closePool(r);\\n    // \\n    emit resultGenerated (address(this), r);\\n  }\\n  \\n  /**slot ZERO MUST be left empty */\\n  function _setOutcomes (bytes32[] memory outcomes) internal {\\n    _outcomeNames = outcomes;\\n  }\\n\\n  function _addOutcome (bytes32 outcomeName) internal {\\n    _outcomeNames.push(outcomeName);\\n  }\\n\\n  function hasResult () external view override returns (bool) {\\n    return _hasResult;\\n  }\\n  \\n  function getResult () external view override returns (uint256) {\\n    return _result;\\n  }\\n\\n  function getOutcomesCount () external view override returns (uint256) {\\n    return _getOutcomesCount();\\n  }\\n  \\n  function getOutcomeName (uint256 index) external view override returns (bytes32) {\\n    return _outcomeNames[index];\\n  }\\n\\n  function _getOutcomesCount () public view returns (uint256) {\\n    return _outcomeNames.length;\\n  }\\n\\n  function getGame () external view returns (bytes32) {\\n    return _getGame();\\n  }\\n\\n  function _getGame () internal view virtual returns (bytes32);\\n}\",\"keccak256\":\"0x850e6a082d69a2400a9f42a62bcf47101b7cbc01d0cea92ffa5276222eb1f3da\",\"license\":\"MIT\"},\"contracts/interfaces/IResultController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IResultController {\\n\\n  event resultGenerated (address indexed controller, uint256 indexed result);\\n\\n  function hasResult () external view returns (bool);\\n  \\n  function getResult () external view returns (uint256);\\n  \\n  function getOutcomesCount () external view returns (uint256);\\n  \\n  function getOutcomeName (uint256 index) external view returns (bytes32);\\n  \\n  function getGame () external view returns (bytes32);\\n\\n}\",\"keccak256\":\"0x619a43c4944376159a3c1678ddfb696f213e74d4764a45ba57ad92968a41c93a\",\"license\":\"MIT\"},\"contracts/test/functions/MockController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsClient} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\\\";\\nimport {ConfirmedOwner} from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\nimport {FunctionsRequest} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\\\";\\nimport \\\"../../BaseResultController.sol\\\";\\n\\ncontract MockControllerFunction is BaseResultController,FunctionsClient, ConfirmedOwner {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n    bytes32 public donId; // DON ID for the Functions DON to which the requests are sent\\n    uint64 private subscriptionId;\\n    bytes32 public s_lastRequestId;\\n    string public s_lastError;\\n\\n    // string private constant SOURCE = \\\"const randomNumber = Math.floor(Math.random() * 10); const result = randomNumber.toString(); return Functions.encodeString(result);\\\";\\n    string private constant SOURCE = \\\"return Functions.encodeString('5');\\\";\\n    // string private constant SOURCE = \\\"return Functions.encodeString(Math.floor(Math.random() * 10).toString());\\\";\\n    constructor(\\n        address router,\\n        bytes32 _donId,\\n        uint64 _subscriptionId\\n    ) FunctionsClient(router) ConfirmedOwner(msg.sender) {\\n        subscriptionId = _subscriptionId;\\n        donId = _donId;\\n        createOutcomes();\\n    }\\n\\n    function sendRequest() external onlyOwner {\\n        FunctionsRequest.Request memory req; // Struct API reference: https://docs.chain.link/chainlink-functions/api-reference/functions-request\\n        req.initializeRequest(FunctionsRequest.Location.Inline, FunctionsRequest.CodeLanguage.JavaScript, SOURCE);\\n        s_lastRequestId = _sendRequest(req.encodeCBOR(), subscriptionId, 300000, donId);\\n    }\\n\\n    function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal override {\\n        s_lastError = string(err);\\n        bytes32 responseHash = keccak256(response);\\n        if (responseHash == keccak256(bytes(\\\"0\\\"))) {\\n            _setResult(0);\\n        } else if (responseHash == keccak256(bytes(\\\"1\\\"))) {\\n            _setResult(1);\\n        } else if (responseHash == keccak256(bytes(\\\"2\\\"))) {\\n            _setResult(2);\\n        } else if (responseHash == keccak256(bytes(\\\"3\\\"))) {\\n            _setResult(3);\\n        } else if (responseHash == keccak256(bytes(\\\"4\\\"))) {\\n            _setResult(4);\\n        } else if (responseHash == keccak256(bytes(\\\"5\\\"))) {\\n            _setResult(5);\\n        } else if (responseHash == keccak256(bytes(\\\"6\\\"))) {\\n            _setResult(6);\\n        } else if (responseHash == keccak256(bytes(\\\"7\\\"))) {\\n            _setResult(7);\\n        } else if (responseHash == keccak256(bytes(\\\"8\\\"))) {\\n            _setResult(8);\\n        } else if (responseHash == keccak256(bytes(\\\"9\\\"))) {\\n            _setResult(9);\\n        }\\n    }\\n\\n    function createOutcomes() private {\\n        _addOutcome(bytes32(\\\"Real Madrid\\\"));\\n        _addOutcome(bytes32(\\\"Barcelona\\\"));\\n        _addOutcome(bytes32(\\\"Manchester United\\\"));\\n        _addOutcome(bytes32(\\\"Bayern Munich\\\"));\\n        _addOutcome(bytes32(\\\"Juventus\\\"));\\n        _addOutcome(bytes32(\\\"Paris Saint-Germain\\\"));\\n        _addOutcome(bytes32(\\\"Liverpool\\\"));\\n        _addOutcome(bytes32(\\\"Chelsea\\\"));\\n        _addOutcome(bytes32(\\\"Manchester City\\\"));\\n        _addOutcome(bytes32(\\\"Atletico Madrid\\\"));\\n    }\\n\\n    function _getGame() internal pure override returns(bytes32) {\\n        return bytes32(abi.encodePacked(\\\"UEFA Champions League\\\"));\\n    }\\n}\",\"keccak256\":\"0x2e2f659a20a55698923e98cebd07ad52a6bdd5b087d3e9450751b3465e899433\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002fa438038062002fa4833981810160405281019062000037919062000604565b338060008560008060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620000fd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000f490620006c1565b60405180910390fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462000185576200018481620001d160201b60201c565b5b50505080600560006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600481905550620001c86200030260201b60201c565b50505062000755565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000242576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002399062000733565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b620003337f5265616c204d6164726964000000000000000000000000000000000000000000620004ee60201b60201c565b620003647f42617263656c6f6e610000000000000000000000000000000000000000000000620004ee60201b60201c565b620003957f4d616e6368657374657220556e69746564000000000000000000000000000000620004ee60201b60201c565b620003c67f42617965726e204d756e69636800000000000000000000000000000000000000620004ee60201b60201c565b620003f77f4a7576656e747573000000000000000000000000000000000000000000000000620004ee60201b60201c565b620004287f5061726973205361696e742d4765726d61696e00000000000000000000000000620004ee60201b60201c565b620004597f4c69766572706f6f6c0000000000000000000000000000000000000000000000620004ee60201b60201c565b6200048a7f4368656c73656100000000000000000000000000000000000000000000000000620004ee60201b60201c565b620004bb7f4d616e6368657374657220436974790000000000000000000000000000000000620004ee60201b60201c565b620004ec7f41746c657469636f204d61647269640000000000000000000000000000000000620004ee60201b60201c565b565b600181908060018154018082558091505060019003906000526020600020016000909190919091505550565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200054c826200051f565b9050919050565b6200055e816200053f565b81146200056a57600080fd5b50565b6000815190506200057e8162000553565b92915050565b6000819050919050565b620005998162000584565b8114620005a557600080fd5b50565b600081519050620005b9816200058e565b92915050565b600067ffffffffffffffff82169050919050565b620005de81620005bf565b8114620005ea57600080fd5b50565b600081519050620005fe81620005d3565b92915050565b60008060006060848603121562000620576200061f6200051a565b5b600062000630868287016200056d565b93505060206200064386828701620005a8565b92505060406200065686828701620005ed565b9150509250925092565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b6000620006a960188362000660565b9150620006b68262000671565b602082019050919050565b60006020820190508181036000830152620006dc816200069a565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006200071b60178362000660565b91506200072882620006e3565b602082019050919050565b600060208201905081810360008301526200074e816200070c565b9050919050565b60805161282c620007786000396000818161027b0152610f5e015261282c6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638033c00d1161008c578063b1e2174911610066578063b1e21749146101f1578063de2927891461020f578063de5005cd1461022d578063f2fde38b1461025d576100ea565b80638033c00d146101975780638da5cb5b146101b55780638dbe7b9d146101d3576100ea565b8063301ccdfa116100c8578063301ccdfa146101335780634494fd9f146101515780634b0795a81461016f57806379ba50971461018d576100ea565b80630ca76175146100ef5780631053eaa31461010b5780631bee2f2a14610129575b600080fd5b61010960048036038101906101049190611a66565b610279565b005b61011361033b565b6040516101209190611b0c565b60405180910390f35b610131610351565b005b61013b6103c9565b6040516101489190611b40565b60405180910390f35b6101596103d6565b6040516101669190611b6a565b60405180910390f35b6101776103e5565b6040516101849190611c04565b60405180910390f35b610195610473565b005b61019f61060a565b6040516101ac9190611b40565b60405180910390f35b6101bd610619565b6040516101ca9190611c67565b60405180910390f35b6101db610643565b6040516101e89190611b6a565b60405180910390f35b6101f9610649565b6040516102069190611b6a565b60405180910390f35b61021761064f565b6040516102249190611b40565b60405180910390f35b61024760048036038101906102429190611cae565b61066a565b6040516102549190611b6a565b60405180910390f35b61027760048036038101906102729190611d07565b610692565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102fe576040517fc6829f8300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103098383836106a6565b827f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e660405160405180910390a2505050565b60008060009054906101000a900460ff16905090565b610359610a01565b61036161182a565b6103916000806040518060600160405280602381526020016127d46023913984610a93909392919063ffffffff16565b6103c061039d82610b3d565b600560009054906101000a900467ffffffffffffffff16620493e0600454610f59565b60068190555050565b6000600180549050905090565b60006103e061103c565b905090565b600780546103f290611d63565b80601f016020809104026020016040519081016040528092919081815260200182805461041e90611d63565b801561046b5780601f106104405761010080835404028352916020019161046b565b820191906000526020600020905b81548152906001019060200180831161044e57829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fa90611de0565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60006106146103c9565b905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60045481565b60065481565b60008060019054906101000a900461ffff1661ffff16905090565b6000600182815481106106805761067f611e00565b5b90600052602060002001549050919050565b61069a610a01565b6106a38161106a565b50565b80600790816106b59190611fdb565b506000828051906020012090506040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152508051906020012081036107145761070f6000611198565b6109fb565b6040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250805190602001208103610766576107616001611198565b6109fa565b6040518060400160405280600181526020017f32000000000000000000000000000000000000000000000000000000000000008152508051906020012081036107b8576107b36002611198565b6109f9565b6040518060400160405280600181526020017f330000000000000000000000000000000000000000000000000000000000000081525080519060200120810361080a576108056003611198565b6109f8565b6040518060400160405280600181526020017f340000000000000000000000000000000000000000000000000000000000000081525080519060200120810361085c576108576004611198565b6109f7565b6040518060400160405280600181526020017f35000000000000000000000000000000000000000000000000000000000000008152508051906020012081036108ae576108a96005611198565b6109f6565b6040518060400160405280600181526020017f3600000000000000000000000000000000000000000000000000000000000000815250805190602001208103610900576108fb6006611198565b6109f5565b6040518060400160405280600181526020017f37000000000000000000000000000000000000000000000000000000000000008152508051906020012081036109525761094d6007611198565b6109f4565b6040518060400160405280600181526020017f38000000000000000000000000000000000000000000000000000000000000008152508051906020012081036109a45761099f6008611198565b6109f3565b6040518060400160405280600181526020017f39000000000000000000000000000000000000000000000000000000000000008152508051906020012081036109f2576109f16009611198565b5b5b5b5b5b5b5b5b5b5b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a88906120f9565b60405180910390fd5b565b6000815103610ace576040517f22ce3edd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8284600001906002811115610ae657610ae5612119565b5b90816002811115610afa57610af9612119565b5b815250508184604001906000811115610b1657610b15612119565b5b90816000811115610b2a57610b29612119565b5b8152505080846060018190525050505050565b60606000610b4c6101006112af565b9050610b966040518060400160405280600c81526020017f636f64654c6f636174696f6e0000000000000000000000000000000000000000815250826112d690919063ffffffff16565b610bbf83600001516002811115610bb057610baf612119565b5b826112ff90919063ffffffff16565b610c076040518060400160405280600881526020017f6c616e6775616765000000000000000000000000000000000000000000000000815250826112d690919063ffffffff16565b610c3083604001516000811115610c2157610c20612119565b5b826112ff90919063ffffffff16565b610c786040518060400160405280600681526020017f736f757263650000000000000000000000000000000000000000000000000000815250826112d690919063ffffffff16565b610c8f8360600151826112d690919063ffffffff16565b60008360a00151511115610d4b57610ce56040518060400160405280600481526020017f6172677300000000000000000000000000000000000000000000000000000000815250826112d690919063ffffffff16565b610cee8161134f565b60005b8360a0015151811015610d4057610d2f8460a001518281518110610d1857610d17611e00565b5b6020026020010151836112d690919063ffffffff16565b80610d3990612177565b9050610cf1565b50610d4a81611377565b5b60008360800151511115610e8c5760006002811115610d6d57610d6c612119565b5b83602001516002811115610d8457610d83612119565b5b03610dbb576040517fa80d31f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e036040518060400160405280600f81526020017f736563726574734c6f636174696f6e0000000000000000000000000000000000815250826112d690919063ffffffff16565b610e2c83602001516002811115610e1d57610e1c612119565b5b826112ff90919063ffffffff16565b610e746040518060400160405280600781526020017f7365637265747300000000000000000000000000000000000000000000000000815250826112d690919063ffffffff16565b610e8b83608001518261139f90919063ffffffff16565b5b60008360c00151511115610f4857610ee26040518060400160405280600981526020017f6279746573417267730000000000000000000000000000000000000000000000815250826112d690919063ffffffff16565b610eeb8161134f565b60005b8360c0015151811015610f3d57610f2c8460c001518281518110610f1557610f14611e00565b5b60200260200101518361139f90919063ffffffff16565b80610f3690612177565b9050610eee565b50610f4781611377565b5b806000015160000151915050919050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663461d27628688600188886040518663ffffffff1660e01b8152600401610fbe959493929190612273565b6020604051808303816000875af1158015610fdd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100191906122e2565b9050807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db860405160405180910390a280915050949350505050565b600060405160200161104d90612366565b604051602081830303815290604052611065906123a0565b905090565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cf90612453565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b60008054906101000a900460ff16156111e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111dd906124bf565b60405180910390fd5b60008161ffff160361122d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112249061252b565b60405180910390fd5b60016000806101000a81548160ff02191690831515021790555080600060016101000a81548161ffff021916908361ffff1602179055508061ffff163073ffffffffffffffffffffffffffffffffffffffff167f19d22413a5e18244e9883866082c3fd384c3b031c96fac8b7a6a7c4dfbb90bf360405160405180910390a350565b6112b761189c565b6112c58160000151836113c8565b506000816020018181525050919050565b6112e38260038351611441565b6112fa8183600001516115ea90919063ffffffff16565b505050565b61132160026005600660ff16901b17836000015161160690919063ffffffff16565b5061134b82826040516020016113379190611b40565b60405160208183030381529060405261139f565b5050565b61135a816004611670565b60018160200181815161136d919061254b565b9150818152505050565b611382816007611670565b600181602001818151611395919061257f565b9150818152505050565b6113ac8260028351611441565b6113c38183600001516115ea90919063ffffffff16565b505050565b6113d06118bc565b60006020836113df91906125e2565b1461140b576020826113f191906125e2565b60206113fd919061257f565b82611408919061254b565b91505b81836020018181525050604051808452600081528281016020018181101561143257600080fd5b80604052505082905092915050565b60178167ffffffffffffffff161161147c576114768160058460ff16901b60ff1617846000015161160690919063ffffffff16565b506115e5565b60ff8167ffffffffffffffff16116114da576114af601860058460ff16901b17846000015161160690919063ffffffff16565b506114d48167ffffffffffffffff16600185600001516116969092919063ffffffff16565b506115e4565b61ffff8167ffffffffffffffff16116115395761150e601960058460ff16901b17846000015161160690919063ffffffff16565b506115338167ffffffffffffffff16600285600001516116969092919063ffffffff16565b506115e3565b63ffffffff8167ffffffffffffffff161161159a5761156f601a60058460ff16901b17846000015161160690919063ffffffff16565b506115948167ffffffffffffffff16600485600001516116969092919063ffffffff16565b506115e2565b6115bb601b60058460ff16901b17846000015161160690919063ffffffff16565b506115e08167ffffffffffffffff16600885600001516116969092919063ffffffff16565b505b5b5b5b505050565b6115f26118bc565b6115fe83838451611723565b905092915050565b61160e6118bc565b600083600001515190506000600182611627919061254b565b90508460200151821061164b5761164a856002836116459190612613565b611806565b5b84516020838201018581538151831115611663578282525b5050849250505092915050565b611691601f60058360ff16901b17836000015161160690919063ffffffff16565b505050565b61169e6118bc565b60008460000151519050600081846116b6919061254b565b905085602001518111156116db576116da866002836116d59190612613565b611806565b5b60006001856101006116ed9190612788565b6116f7919061257f565b905086518281018783198251161781528151841115611714578382525b50508693505050509392505050565b61172b6118bc565b825182111561173957600080fd5b6000846000015151905060008382611751919061254b565b9050856020015181111561177657611775866002836117709190612613565b611806565b5b60008087518051856020830101935080851115611791578482525b60208901925050505b602086106117d857805182526020826117b3919061254b565b91506020816117c2919061254b565b90506020866117d1919061257f565b955061179a565b60006001876020036101000a0390508019825116818451168181178552505050879450505050509392505050565b60008260000151905061181983836113c8565b5061182483826115ea565b50505050565b6040518060e001604052806000600281111561184957611848612119565b5b81526020016000600281111561186257611861612119565b5b815260200160008081111561187a57611879612119565b5b8152602001606081526020016060815260200160608152602001606081525090565b60405180604001604052806118af6118bc565b8152602001600081525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6118fd816118ea565b811461190857600080fd5b50565b60008135905061191a816118f4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119738261192a565b810181811067ffffffffffffffff821117156119925761199161193b565b5b80604052505050565b60006119a56118d6565b90506119b1828261196a565b919050565b600067ffffffffffffffff8211156119d1576119d061193b565b5b6119da8261192a565b9050602081019050919050565b82818337600083830152505050565b6000611a09611a04846119b6565b61199b565b905082815260208101848484011115611a2557611a24611925565b5b611a308482856119e7565b509392505050565b600082601f830112611a4d57611a4c611920565b5b8135611a5d8482602086016119f6565b91505092915050565b600080600060608486031215611a7f57611a7e6118e0565b5b6000611a8d8682870161190b565b935050602084013567ffffffffffffffff811115611aae57611aad6118e5565b5b611aba86828701611a38565b925050604084013567ffffffffffffffff811115611adb57611ada6118e5565b5b611ae786828701611a38565b9150509250925092565b60008115159050919050565b611b0681611af1565b82525050565b6000602082019050611b216000830184611afd565b92915050565b6000819050919050565b611b3a81611b27565b82525050565b6000602082019050611b556000830184611b31565b92915050565b611b64816118ea565b82525050565b6000602082019050611b7f6000830184611b5b565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611bbf578082015181840152602081019050611ba4565b60008484015250505050565b6000611bd682611b85565b611be08185611b90565b9350611bf0818560208601611ba1565b611bf98161192a565b840191505092915050565b60006020820190508181036000830152611c1e8184611bcb565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c5182611c26565b9050919050565b611c6181611c46565b82525050565b6000602082019050611c7c6000830184611c58565b92915050565b611c8b81611b27565b8114611c9657600080fd5b50565b600081359050611ca881611c82565b92915050565b600060208284031215611cc457611cc36118e0565b5b6000611cd284828501611c99565b91505092915050565b611ce481611c46565b8114611cef57600080fd5b50565b600081359050611d0181611cdb565b92915050565b600060208284031215611d1d57611d1c6118e0565b5b6000611d2b84828501611cf2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d7b57607f821691505b602082108103611d8e57611d8d611d34565b5b50919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000611dca601683611b90565b9150611dd582611d94565b602082019050919050565b60006020820190508181036000830152611df981611dbd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611e917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611e54565b611e9b8683611e54565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611ed8611ed3611ece84611b27565b611eb3565b611b27565b9050919050565b6000819050919050565b611ef283611ebd565b611f06611efe82611edf565b848454611e61565b825550505050565b600090565b611f1b611f0e565b611f26818484611ee9565b505050565b5b81811015611f4a57611f3f600082611f13565b600181019050611f2c565b5050565b601f821115611f8f57611f6081611e2f565b611f6984611e44565b81016020851015611f78578190505b611f8c611f8485611e44565b830182611f2b565b50505b505050565b600082821c905092915050565b6000611fb260001984600802611f94565b1980831691505092915050565b6000611fcb8383611fa1565b9150826002028217905092915050565b611fe482611b85565b67ffffffffffffffff811115611ffd57611ffc61193b565b5b6120078254611d63565b612012828285611f4e565b600060209050601f8311600181146120455760008415612033578287015190505b61203d8582611fbf565b8655506120a5565b601f19841661205386611e2f565b60005b8281101561207b57848901518255600182019150602085019450602081019050612056565b868310156120985784890151612094601f891682611fa1565b8355505b6001600288020188555050505b505050505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006120e3601683611b90565b91506120ee826120ad565b602082019050919050565b60006020820190508181036000830152612112816120d6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061218282611b27565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036121b4576121b3612148565b5b600182019050919050565b600067ffffffffffffffff82169050919050565b6121dc816121bf565b82525050565b600081519050919050565b600082825260208201905092915050565b6000612209826121e2565b61221381856121ed565b9350612223818560208601611ba1565b61222c8161192a565b840191505092915050565b600061ffff82169050919050565b61224e81612237565b82525050565b600063ffffffff82169050919050565b61226d81612254565b82525050565b600060a08201905061228860008301886121d3565b818103602083015261229a81876121fe565b90506122a96040830186612245565b6122b66060830185612264565b6122c36080830184611b5b565b9695505050505050565b6000815190506122dc816118f4565b92915050565b6000602082840312156122f8576122f76118e0565b5b6000612306848285016122cd565b91505092915050565b600081905092915050565b7f55454641204368616d70696f6e73204c65616775650000000000000000000000600082015250565b600061235060158361230f565b915061235b8261231a565b601582019050919050565b600061237182612343565b9150819050919050565b6000819050602082019050919050565b600061239782516118ea565b80915050919050565b60006123ab826121e2565b826123b58461237b565b90506123c08161238b565b92506020821015612400576123fb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802611e54565b831692505b5050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600061243d601783611b90565b915061244882612407565b602082019050919050565b6000602082019050818103600083015261246c81612430565b9050919050565b7f416c72656164792068617320726573756c742e00000000000000000000000000600082015250565b60006124a9601383611b90565b91506124b482612473565b602082019050919050565b600060208201905081810360008301526124d88161249c565b9050919050565b7f526573756c742063616e2774206265205a45524f2e0000000000000000000000600082015250565b6000612515601583611b90565b9150612520826124df565b602082019050919050565b6000602082019050818103600083015261254481612508565b9050919050565b600061255682611b27565b915061256183611b27565b925082820190508082111561257957612578612148565b5b92915050565b600061258a82611b27565b915061259583611b27565b92508282039050818111156125ad576125ac612148565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006125ed82611b27565b91506125f883611b27565b925082612608576126076125b3565b5b828206905092915050565b600061261e82611b27565b915061262983611b27565b925082820261263781611b27565b9150828204841483151761264e5761264d612148565b5b5092915050565b60008160011c9050919050565b6000808291508390505b60018511156126ac5780860481111561268857612687612148565b5b60018516156126975780820291505b80810290506126a585612655565b945061266c565b94509492505050565b6000826126c55760019050612781565b816126d35760009050612781565b81600181146126e957600281146126f357612722565b6001915050612781565b60ff84111561270557612704612148565b5b8360020a91508482111561271c5761271b612148565b5b50612781565b5060208310610133831016604e8410600b84101617156127575782820a90508381111561275257612751612148565b5b612781565b6127648484846001612662565b9250905081840481111561277b5761277a612148565b5b81810290505b9392505050565b600061279382611b27565b915061279e83611b27565b92506127cb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846126b5565b90509291505056fe72657475726e2046756e6374696f6e732e656e636f6465537472696e6728273527293ba26469706673582212200b90ccb3773afdcf2a791bd37d4d4b1205e4c64cee49e7bbc3e3fb1828cabd6064736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638033c00d1161008c578063b1e2174911610066578063b1e21749146101f1578063de2927891461020f578063de5005cd1461022d578063f2fde38b1461025d576100ea565b80638033c00d146101975780638da5cb5b146101b55780638dbe7b9d146101d3576100ea565b8063301ccdfa116100c8578063301ccdfa146101335780634494fd9f146101515780634b0795a81461016f57806379ba50971461018d576100ea565b80630ca76175146100ef5780631053eaa31461010b5780631bee2f2a14610129575b600080fd5b61010960048036038101906101049190611a66565b610279565b005b61011361033b565b6040516101209190611b0c565b60405180910390f35b610131610351565b005b61013b6103c9565b6040516101489190611b40565b60405180910390f35b6101596103d6565b6040516101669190611b6a565b60405180910390f35b6101776103e5565b6040516101849190611c04565b60405180910390f35b610195610473565b005b61019f61060a565b6040516101ac9190611b40565b60405180910390f35b6101bd610619565b6040516101ca9190611c67565b60405180910390f35b6101db610643565b6040516101e89190611b6a565b60405180910390f35b6101f9610649565b6040516102069190611b6a565b60405180910390f35b61021761064f565b6040516102249190611b40565b60405180910390f35b61024760048036038101906102429190611cae565b61066a565b6040516102549190611b6a565b60405180910390f35b61027760048036038101906102729190611d07565b610692565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102fe576040517fc6829f8300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103098383836106a6565b827f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e660405160405180910390a2505050565b60008060009054906101000a900460ff16905090565b610359610a01565b61036161182a565b6103916000806040518060600160405280602381526020016127d46023913984610a93909392919063ffffffff16565b6103c061039d82610b3d565b600560009054906101000a900467ffffffffffffffff16620493e0600454610f59565b60068190555050565b6000600180549050905090565b60006103e061103c565b905090565b600780546103f290611d63565b80601f016020809104026020016040519081016040528092919081815260200182805461041e90611d63565b801561046b5780601f106104405761010080835404028352916020019161046b565b820191906000526020600020905b81548152906001019060200180831161044e57829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fa90611de0565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60006106146103c9565b905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60045481565b60065481565b60008060019054906101000a900461ffff1661ffff16905090565b6000600182815481106106805761067f611e00565b5b90600052602060002001549050919050565b61069a610a01565b6106a38161106a565b50565b80600790816106b59190611fdb565b506000828051906020012090506040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152508051906020012081036107145761070f6000611198565b6109fb565b6040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250805190602001208103610766576107616001611198565b6109fa565b6040518060400160405280600181526020017f32000000000000000000000000000000000000000000000000000000000000008152508051906020012081036107b8576107b36002611198565b6109f9565b6040518060400160405280600181526020017f330000000000000000000000000000000000000000000000000000000000000081525080519060200120810361080a576108056003611198565b6109f8565b6040518060400160405280600181526020017f340000000000000000000000000000000000000000000000000000000000000081525080519060200120810361085c576108576004611198565b6109f7565b6040518060400160405280600181526020017f35000000000000000000000000000000000000000000000000000000000000008152508051906020012081036108ae576108a96005611198565b6109f6565b6040518060400160405280600181526020017f3600000000000000000000000000000000000000000000000000000000000000815250805190602001208103610900576108fb6006611198565b6109f5565b6040518060400160405280600181526020017f37000000000000000000000000000000000000000000000000000000000000008152508051906020012081036109525761094d6007611198565b6109f4565b6040518060400160405280600181526020017f38000000000000000000000000000000000000000000000000000000000000008152508051906020012081036109a45761099f6008611198565b6109f3565b6040518060400160405280600181526020017f39000000000000000000000000000000000000000000000000000000000000008152508051906020012081036109f2576109f16009611198565b5b5b5b5b5b5b5b5b5b5b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a88906120f9565b60405180910390fd5b565b6000815103610ace576040517f22ce3edd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8284600001906002811115610ae657610ae5612119565b5b90816002811115610afa57610af9612119565b5b815250508184604001906000811115610b1657610b15612119565b5b90816000811115610b2a57610b29612119565b5b8152505080846060018190525050505050565b60606000610b4c6101006112af565b9050610b966040518060400160405280600c81526020017f636f64654c6f636174696f6e0000000000000000000000000000000000000000815250826112d690919063ffffffff16565b610bbf83600001516002811115610bb057610baf612119565b5b826112ff90919063ffffffff16565b610c076040518060400160405280600881526020017f6c616e6775616765000000000000000000000000000000000000000000000000815250826112d690919063ffffffff16565b610c3083604001516000811115610c2157610c20612119565b5b826112ff90919063ffffffff16565b610c786040518060400160405280600681526020017f736f757263650000000000000000000000000000000000000000000000000000815250826112d690919063ffffffff16565b610c8f8360600151826112d690919063ffffffff16565b60008360a00151511115610d4b57610ce56040518060400160405280600481526020017f6172677300000000000000000000000000000000000000000000000000000000815250826112d690919063ffffffff16565b610cee8161134f565b60005b8360a0015151811015610d4057610d2f8460a001518281518110610d1857610d17611e00565b5b6020026020010151836112d690919063ffffffff16565b80610d3990612177565b9050610cf1565b50610d4a81611377565b5b60008360800151511115610e8c5760006002811115610d6d57610d6c612119565b5b83602001516002811115610d8457610d83612119565b5b03610dbb576040517fa80d31f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e036040518060400160405280600f81526020017f736563726574734c6f636174696f6e0000000000000000000000000000000000815250826112d690919063ffffffff16565b610e2c83602001516002811115610e1d57610e1c612119565b5b826112ff90919063ffffffff16565b610e746040518060400160405280600781526020017f7365637265747300000000000000000000000000000000000000000000000000815250826112d690919063ffffffff16565b610e8b83608001518261139f90919063ffffffff16565b5b60008360c00151511115610f4857610ee26040518060400160405280600981526020017f6279746573417267730000000000000000000000000000000000000000000000815250826112d690919063ffffffff16565b610eeb8161134f565b60005b8360c0015151811015610f3d57610f2c8460c001518281518110610f1557610f14611e00565b5b60200260200101518361139f90919063ffffffff16565b80610f3690612177565b9050610eee565b50610f4781611377565b5b806000015160000151915050919050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663461d27628688600188886040518663ffffffff1660e01b8152600401610fbe959493929190612273565b6020604051808303816000875af1158015610fdd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100191906122e2565b9050807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db860405160405180910390a280915050949350505050565b600060405160200161104d90612366565b604051602081830303815290604052611065906123a0565b905090565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cf90612453565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b60008054906101000a900460ff16156111e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111dd906124bf565b60405180910390fd5b60008161ffff160361122d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112249061252b565b60405180910390fd5b60016000806101000a81548160ff02191690831515021790555080600060016101000a81548161ffff021916908361ffff1602179055508061ffff163073ffffffffffffffffffffffffffffffffffffffff167f19d22413a5e18244e9883866082c3fd384c3b031c96fac8b7a6a7c4dfbb90bf360405160405180910390a350565b6112b761189c565b6112c58160000151836113c8565b506000816020018181525050919050565b6112e38260038351611441565b6112fa8183600001516115ea90919063ffffffff16565b505050565b61132160026005600660ff16901b17836000015161160690919063ffffffff16565b5061134b82826040516020016113379190611b40565b60405160208183030381529060405261139f565b5050565b61135a816004611670565b60018160200181815161136d919061254b565b9150818152505050565b611382816007611670565b600181602001818151611395919061257f565b9150818152505050565b6113ac8260028351611441565b6113c38183600001516115ea90919063ffffffff16565b505050565b6113d06118bc565b60006020836113df91906125e2565b1461140b576020826113f191906125e2565b60206113fd919061257f565b82611408919061254b565b91505b81836020018181525050604051808452600081528281016020018181101561143257600080fd5b80604052505082905092915050565b60178167ffffffffffffffff161161147c576114768160058460ff16901b60ff1617846000015161160690919063ffffffff16565b506115e5565b60ff8167ffffffffffffffff16116114da576114af601860058460ff16901b17846000015161160690919063ffffffff16565b506114d48167ffffffffffffffff16600185600001516116969092919063ffffffff16565b506115e4565b61ffff8167ffffffffffffffff16116115395761150e601960058460ff16901b17846000015161160690919063ffffffff16565b506115338167ffffffffffffffff16600285600001516116969092919063ffffffff16565b506115e3565b63ffffffff8167ffffffffffffffff161161159a5761156f601a60058460ff16901b17846000015161160690919063ffffffff16565b506115948167ffffffffffffffff16600485600001516116969092919063ffffffff16565b506115e2565b6115bb601b60058460ff16901b17846000015161160690919063ffffffff16565b506115e08167ffffffffffffffff16600885600001516116969092919063ffffffff16565b505b5b5b5b505050565b6115f26118bc565b6115fe83838451611723565b905092915050565b61160e6118bc565b600083600001515190506000600182611627919061254b565b90508460200151821061164b5761164a856002836116459190612613565b611806565b5b84516020838201018581538151831115611663578282525b5050849250505092915050565b611691601f60058360ff16901b17836000015161160690919063ffffffff16565b505050565b61169e6118bc565b60008460000151519050600081846116b6919061254b565b905085602001518111156116db576116da866002836116d59190612613565b611806565b5b60006001856101006116ed9190612788565b6116f7919061257f565b905086518281018783198251161781528151841115611714578382525b50508693505050509392505050565b61172b6118bc565b825182111561173957600080fd5b6000846000015151905060008382611751919061254b565b9050856020015181111561177657611775866002836117709190612613565b611806565b5b60008087518051856020830101935080851115611791578482525b60208901925050505b602086106117d857805182526020826117b3919061254b565b91506020816117c2919061254b565b90506020866117d1919061257f565b955061179a565b60006001876020036101000a0390508019825116818451168181178552505050879450505050509392505050565b60008260000151905061181983836113c8565b5061182483826115ea565b50505050565b6040518060e001604052806000600281111561184957611848612119565b5b81526020016000600281111561186257611861612119565b5b815260200160008081111561187a57611879612119565b5b8152602001606081526020016060815260200160608152602001606081525090565b60405180604001604052806118af6118bc565b8152602001600081525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6118fd816118ea565b811461190857600080fd5b50565b60008135905061191a816118f4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119738261192a565b810181811067ffffffffffffffff821117156119925761199161193b565b5b80604052505050565b60006119a56118d6565b90506119b1828261196a565b919050565b600067ffffffffffffffff8211156119d1576119d061193b565b5b6119da8261192a565b9050602081019050919050565b82818337600083830152505050565b6000611a09611a04846119b6565b61199b565b905082815260208101848484011115611a2557611a24611925565b5b611a308482856119e7565b509392505050565b600082601f830112611a4d57611a4c611920565b5b8135611a5d8482602086016119f6565b91505092915050565b600080600060608486031215611a7f57611a7e6118e0565b5b6000611a8d8682870161190b565b935050602084013567ffffffffffffffff811115611aae57611aad6118e5565b5b611aba86828701611a38565b925050604084013567ffffffffffffffff811115611adb57611ada6118e5565b5b611ae786828701611a38565b9150509250925092565b60008115159050919050565b611b0681611af1565b82525050565b6000602082019050611b216000830184611afd565b92915050565b6000819050919050565b611b3a81611b27565b82525050565b6000602082019050611b556000830184611b31565b92915050565b611b64816118ea565b82525050565b6000602082019050611b7f6000830184611b5b565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611bbf578082015181840152602081019050611ba4565b60008484015250505050565b6000611bd682611b85565b611be08185611b90565b9350611bf0818560208601611ba1565b611bf98161192a565b840191505092915050565b60006020820190508181036000830152611c1e8184611bcb565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c5182611c26565b9050919050565b611c6181611c46565b82525050565b6000602082019050611c7c6000830184611c58565b92915050565b611c8b81611b27565b8114611c9657600080fd5b50565b600081359050611ca881611c82565b92915050565b600060208284031215611cc457611cc36118e0565b5b6000611cd284828501611c99565b91505092915050565b611ce481611c46565b8114611cef57600080fd5b50565b600081359050611d0181611cdb565b92915050565b600060208284031215611d1d57611d1c6118e0565b5b6000611d2b84828501611cf2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d7b57607f821691505b602082108103611d8e57611d8d611d34565b5b50919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000611dca601683611b90565b9150611dd582611d94565b602082019050919050565b60006020820190508181036000830152611df981611dbd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611e917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611e54565b611e9b8683611e54565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611ed8611ed3611ece84611b27565b611eb3565b611b27565b9050919050565b6000819050919050565b611ef283611ebd565b611f06611efe82611edf565b848454611e61565b825550505050565b600090565b611f1b611f0e565b611f26818484611ee9565b505050565b5b81811015611f4a57611f3f600082611f13565b600181019050611f2c565b5050565b601f821115611f8f57611f6081611e2f565b611f6984611e44565b81016020851015611f78578190505b611f8c611f8485611e44565b830182611f2b565b50505b505050565b600082821c905092915050565b6000611fb260001984600802611f94565b1980831691505092915050565b6000611fcb8383611fa1565b9150826002028217905092915050565b611fe482611b85565b67ffffffffffffffff811115611ffd57611ffc61193b565b5b6120078254611d63565b612012828285611f4e565b600060209050601f8311600181146120455760008415612033578287015190505b61203d8582611fbf565b8655506120a5565b601f19841661205386611e2f565b60005b8281101561207b57848901518255600182019150602085019450602081019050612056565b868310156120985784890151612094601f891682611fa1565b8355505b6001600288020188555050505b505050505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006120e3601683611b90565b91506120ee826120ad565b602082019050919050565b60006020820190508181036000830152612112816120d6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061218282611b27565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036121b4576121b3612148565b5b600182019050919050565b600067ffffffffffffffff82169050919050565b6121dc816121bf565b82525050565b600081519050919050565b600082825260208201905092915050565b6000612209826121e2565b61221381856121ed565b9350612223818560208601611ba1565b61222c8161192a565b840191505092915050565b600061ffff82169050919050565b61224e81612237565b82525050565b600063ffffffff82169050919050565b61226d81612254565b82525050565b600060a08201905061228860008301886121d3565b818103602083015261229a81876121fe565b90506122a96040830186612245565b6122b66060830185612264565b6122c36080830184611b5b565b9695505050505050565b6000815190506122dc816118f4565b92915050565b6000602082840312156122f8576122f76118e0565b5b6000612306848285016122cd565b91505092915050565b600081905092915050565b7f55454641204368616d70696f6e73204c65616775650000000000000000000000600082015250565b600061235060158361230f565b915061235b8261231a565b601582019050919050565b600061237182612343565b9150819050919050565b6000819050602082019050919050565b600061239782516118ea565b80915050919050565b60006123ab826121e2565b826123b58461237b565b90506123c08161238b565b92506020821015612400576123fb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802611e54565b831692505b5050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600061243d601783611b90565b915061244882612407565b602082019050919050565b6000602082019050818103600083015261246c81612430565b9050919050565b7f416c72656164792068617320726573756c742e00000000000000000000000000600082015250565b60006124a9601383611b90565b91506124b482612473565b602082019050919050565b600060208201905081810360008301526124d88161249c565b9050919050565b7f526573756c742063616e2774206265205a45524f2e0000000000000000000000600082015250565b6000612515601583611b90565b9150612520826124df565b602082019050919050565b6000602082019050818103600083015261254481612508565b9050919050565b600061255682611b27565b915061256183611b27565b925082820190508082111561257957612578612148565b5b92915050565b600061258a82611b27565b915061259583611b27565b92508282039050818111156125ad576125ac612148565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006125ed82611b27565b91506125f883611b27565b925082612608576126076125b3565b5b828206905092915050565b600061261e82611b27565b915061262983611b27565b925082820261263781611b27565b9150828204841483151761264e5761264d612148565b5b5092915050565b60008160011c9050919050565b6000808291508390505b60018511156126ac5780860481111561268857612687612148565b5b60018516156126975780820291505b80810290506126a585612655565b945061266c565b94509492505050565b6000826126c55760019050612781565b816126d35760009050612781565b81600181146126e957600281146126f357612722565b6001915050612781565b60ff84111561270557612704612148565b5b8360020a91508482111561271c5761271b612148565b5b50612781565b5060208310610133831016604e8410600b84101617156127575782820a90508381111561275257612751612148565b5b612781565b6127648484846001612662565b9250905081840481111561277b5761277a612148565b5b81810290505b9392505050565b600061279382611b27565b915061279e83611b27565b92506127cb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846126b5565b90509291505056fe72657475726e2046756e6374696f6e732e656e636f6465537472696e6728273527293ba26469706673582212200b90ccb3773afdcf2a791bd37d4d4b1205e4c64cee49e7bbc3e3fb1828cabd6064736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3234,
        "contract": "contracts/test/functions/MockController.sol:MockControllerFunction",
        "label": "_hasResult",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3236,
        "contract": "contracts/test/functions/MockController.sol:MockControllerFunction",
        "label": "_result",
        "offset": 1,
        "slot": "0",
        "type": "t_uint16"
      },
      {
        "astId": 3239,
        "contract": "contracts/test/functions/MockController.sol:MockControllerFunction",
        "label": "_outcomeNames",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 991,
        "contract": "contracts/test/functions/MockController.sol:MockControllerFunction",
        "label": "s_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 993,
        "contract": "contracts/test/functions/MockController.sol:MockControllerFunction",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7804,
        "contract": "contracts/test/functions/MockController.sol:MockControllerFunction",
        "label": "donId",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 7806,
        "contract": "contracts/test/functions/MockController.sol:MockControllerFunction",
        "label": "subscriptionId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint64"
      },
      {
        "astId": 7808,
        "contract": "contracts/test/functions/MockController.sol:MockControllerFunction",
        "label": "s_lastRequestId",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 7810,
        "contract": "contracts/test/functions/MockController.sol:MockControllerFunction",
        "label": "s_lastError",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}